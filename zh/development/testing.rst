æµ‹è¯•
####

CakePHP å†…ç½®å¸¦æœ‰å…¨é?¢çš„æµ‹è¯•æ”¯æŒ?ã€‚CakePHP è‡ªå¸¦æœ‰ä¸Ž `PHPUnit <http://phpunit.de>`_ 
çš„é›†æˆ?ã€‚é™¤äº† PHPUnit æ??ä¾›çš„ç‰¹æ€§ï¼ŒCakePHP æ??ä¾›äº†ä¸€äº›é¢?å¤–çš„åŠŸèƒ½ï¼Œä½¿å¾—æµ‹è¯•æ›´ä¸ºå®¹æ˜“ã€‚
æœ¬èŠ‚å°†ä»‹ç»? PHPUnit çš„å®‰è£…ï¼Œå¼€å§‹è¿›è¡Œå?•å…ƒæµ‹è¯•ï¼Œä»¥å?Šå¦‚ä½•ä½¿ç”¨ CakePHP æ??ä¾›çš„æ‰©å±•ã€‚

å®‰è£… PHPUnit
============

CakePHP ä½¿ç”¨ PHPUnit ä½œä¸ºå…¶åº•å±‚æµ‹è¯•æ¡†æž¶ã€‚PHPUnit æ˜¯ PHP å?•å…ƒæµ‹è¯•äº‹å®žä¸Šçš„æ ‡å‡†ã€‚
å®ƒæ??ä¾›äº†ä¸€å¥—æ·±åˆ»è€Œå¼ºå¤§çš„åŠŸèƒ½ï¼Œç¡®ä¿?ä½ çš„ä»£ç ?å?šäº†ä½ è®¤ä¸ºå®ƒæ‰€è¦?å?šçš„äº‹æƒ…ã€‚

é€šè¿‡ Composer å®‰è£…
------------------

è¾ƒæ–°ç‰ˆæœ¬çš„ PHPUnit å½“å‰?ä¸?èƒ½ä¸Ž CakePHP é›†æˆ?::

    "phpunit/phpunit": "3.7.38"

é€šè¿‡ .phar åŒ…æ?¥å®‰è£…
-------------------

ä½ ä¹Ÿå?¯ä»¥ç›´æŽ¥ä¸‹è½½æ–‡ä»¶ã€‚å?ªæ˜¯è¦?æ³¨æ„?ä»Ž https://phar.phpunit.de/ å¾—åˆ°äº†æ­£ç¡®çš„ç‰ˆæœ¬ã€‚
ç¡®ä¿? /usr/local/bin ä½?äºŽ php.ini æ–‡ä»¶çš„ include_path ä¸­::

    wget https://phar.phpunit.de/phpunit-3.7.38.phar -O phpunit.phar
    chmod +x phpunit.phar
    mv phpunit.phar /usr/local/bin/phpunit

.. note::

    PHPUnit 4 ä¸Ž CakePHP çš„å?•å…ƒæµ‹è¯•ä¸?å…¼å®¹ã€‚

    æ ¹æ?®ä½ ç³»ç»Ÿçš„é…?ç½®ï¼Œä½ å?¯èƒ½éœ€è¦?ç”¨ ``sudo`` è¿?è¡Œä¸Šé?¢çš„å‘½ä»¤ã€‚

ä¸€æ—¦ç”¨ PEAR å®‰è£…ç¨‹åº?å®‰è£…äº† PHPUnitï¼Œåº”å½“ç¡®è®¤ PHPUnit åº“åœ¨ PHP çš„ 
``include_path`` ä¸­ã€‚ä¸ºæ­¤ä½ å?¯ä»¥æ£€æŸ¥ php.ini æ–‡ä»¶ï¼Œç¡®ä¿? PHPUnit çš„æ–‡ä»¶åœ¨ 
``include_path`` çš„å…¶ä¸­ä¸€ä¸ªç›®å½•ä¸­ã€‚

.. tip::

    å½“ä½¿ç”¨ PHPUnit 3.6+ æ—¶ï¼Œæ‰€æœ‰çš„è¾“å‡ºéƒ½ä¼šè¢«å?žæ²¡ã€‚å¦‚æžœä½¿ç”¨ CLIï¼Œå?¯ä»¥æ·»åŠ  
    ``--debug`` ä¿®é¥°ç¬¦ï¼›å¦‚æžœä½¿ç”¨ web è¿?è¡Œå™¨æ?¥æ˜¾ç¤ºè¾“å‡ºï¼Œå?¯ä»¥æ·»åŠ  ``&debug=1`` 
    åˆ°ç½‘å?€ä¸­ã€‚

æµ‹è¯•æ•°æ?®åº“çš„è®¾ç½®
================

è®°å¾—åœ¨è¿?è¡Œä»»ä½•æµ‹è¯•ä¹‹å‰?ï¼Œåœ¨ ``app/Config/core.php`` æ–‡ä»¶ä¸­çš„è°ƒè¯•(debug)çº§åˆ«è‡³å°‘æ˜¯ 
1ã€‚å½“è°ƒè¯•çº§åˆ«æ˜¯ 0 æ—¶ï¼Œæ— æ³•é€šè¿‡ web è¿?è¡Œå™¨è®¿é—®æµ‹è¯•ã€‚åœ¨è¿?è¡Œä»»ä½•æµ‹è¯•ä¹‹å‰?ï¼Œåº”å½“ç¡®ä¿?
æ·»åŠ  ``$test`` æ•°æ?®åº“é…?ç½®ã€‚è¯¥é…?ç½®è¢« CakePHP ç”¨äºŽæµ‹è¯•å¤¹å…·(*fixture*)çš„è¡¨å’Œæ•°æ?®::

    public $test = array(
        'datasource' => 'Database/Mysql',
        'persistent' => false,
        'host'       => 'dbhost',
        'login'      => 'dblogin',
        'password'   => 'dbpassword',
        'database'   => 'test_database'
    );

.. note::

    æŠŠæµ‹è¯•æ•°æ?®åº“å’Œå®žé™…çš„æ•°æ?®åº“åˆ†æˆ?ä¸?å?Œçš„æ•°æ?®åº“æ¯”è¾ƒå¥½ã€‚è¿™å?¯ä»¥é?¿å…?å°†æ?¥ä»»ä½•ä»¤äººå°´å°¬
    çš„é”™è¯¯ã€‚

æ£€æŸ¥æµ‹è¯•æ•°æ?®åº“çš„è®¾ç½®
====================

å®‰è£…å®Œäº† PHPUnitï¼Œè®¾ç½®å¥½äº† ``$test`` æ•°æ?®åº“é…?ç½®ï¼Œå?¯ä»¥è¿?è¡Œæ ¸å¿ƒæµ‹è¯•ä¸­çš„ä¸€ä¸ªï¼Œæ?¥
ç¡®ä¿?ä½ å?¯ä»¥ç¼–å†™å’Œè¿?è¡Œä½ è‡ªå·±çš„æµ‹è¯•ã€‚æµ‹è¯•æœ‰ä¸¤ä¸ªå†…ç½®çš„è¿?è¡Œå™¨ï¼Œæˆ‘ä»¬ä»Ž web è¿?è¡Œå™¨å¼€å§‹ã€‚
æµ?è§ˆ http://localhost/your_app/test.php å°±å?¯ä»¥è®¿é—®æµ‹è¯•ï¼Œåº”å½“èƒ½çœ‹åˆ°æ ¸å¿ƒæµ‹è¯•åˆ—è¡¨äº†ã€‚
ç‚¹å‡» 'AllConfigure' æµ‹è¯•ã€‚ä½ åº”å½“çœ‹åˆ°ä¸€ä¸ªç»¿è‰²çš„(è¿›åº¦)æ?¡ï¼Œå’Œè¿?è¡Œçš„æµ‹è¯•çš„æ›´å¤šä¿¡æ?¯ï¼Œ
ä»¥å?Šé€šè¿‡çš„æµ‹è¯•æ•°é‡?ã€‚

æ?­å–œï¼Œä½ çŽ°åœ¨å?¯ä»¥å¼€å§‹ç¼–å†™æµ‹è¯•äº†ï¼?

æµ‹è¯•ç”¨ä¾‹çº¦å®š
============

è±¡ CakePHP ä¸­çš„å¤§éƒ¨åˆ†ä¸œè¥¿ï¼Œæµ‹è¯•ç”¨ä¾‹ä¹Ÿæœ‰ä¸€äº›çº¦å®šã€‚æ¶‰å?Šæµ‹è¯•çš„ï¼š

#. åŒ…å?«æµ‹è¯•çš„ PHP æ–‡ä»¶åº”å½“ä½?äºŽ ``app/Test/Case/[Type]`` ç›®å½•ã€‚
#. è¿™äº›æ–‡ä»¶çš„æ–‡ä»¶å??åº”å½“ä»¥ ``Test.php`` ç»“å°¾ï¼Œè€Œä¸?èƒ½ä»…ä»…æ˜¯.phpã€‚
#. å?«æœ‰æµ‹è¯•çš„ç±»åº”å½“æ‰©å±• ``CakeTestCase``ï¼Œ``ControllerTestCase`` æˆ– 
   ``PHPUnit_Framework_TestCase``ã€‚
#. è±¡å…¶å®ƒç±»å??ï¼Œæµ‹è¯•ç”¨ä¾‹ç±»å??åº”å½“ä¸Žæ–‡ä»¶å??åŒ¹é…?ã€‚æ–‡ä»¶ ``RouterTest.php`` åº”å½“åŒ…å?«
   ``class RouterTest extends CakeTestCase``ã€‚
#. åŒ…å?«æµ‹è¯•(å?³åŒ…å?«æ–­è¨€(*assertion*))çš„ä»»ä½•æ–¹æ³•çš„å??ç§°åº”å½“ä»¥ ``test`` å¼€å¤´ï¼Œä¾‹å¦‚
   ``testPublished()``ã€‚ä¹Ÿå?¯ä»¥ä½¿ç”¨ ``@test`` æ ‡æ³¨(*annotation*)æ?¥æ ‡è®°æ–¹æ³•ä¸ºæµ‹è¯•
   æ–¹æ³•ã€‚

åœ¨åˆ›å»ºäº†æµ‹è¯•ç”¨ä¾‹ä¹‹å?Žï¼Œå?¯ä»¥æµ?è§ˆ ``http://localhost/your_app/test.php`` (å?–å†³äºŽä½ 
çš„é…?ç½®æ˜¯æ€Žæ ·çš„)æ?¥è¿?è¡Œã€‚ç‚¹å‡» App test casesï¼Œå†?ç‚¹å‡»æµ‹è¯•æ–‡ä»¶çš„é“¾æŽ¥ã€‚ä¹Ÿå?¯ä»¥ä»Žå‘½ä»¤è¡Œ
ä½¿ç”¨æµ‹è¯•å¤–å£³(*shell*)æ?¥è¿?è¡Œæµ‹è¯•::

    ./Console/cake test app Model/Post

ä¾‹å¦‚ï¼Œå°±ä¼šè¿?è¡Œ Post æ¨¡åž‹çš„æµ‹è¯•ã€‚

åˆ›å»ºä½ çš„ç¬¬ä¸€ä¸ªæµ‹è¯•ç”¨ä¾‹
======================

åœ¨ä¸‹é?¢çš„ä¾‹å­?ä¸­ï¼Œæˆ‘ä»¬ä¼šä¸ºä¸€ä¸ªå¾ˆç®€å?•çš„åŠ©ä»¶(*helper*)æ–¹æ³•åˆ›å»ºä¸€ä¸ªæµ‹è¯•ç”¨ä¾‹ã€‚æˆ‘ä»¬è¦?
æµ‹è¯•çš„åŠ©ä»¶ä¼šç”Ÿæˆ?è¿›åº¦æ?¡ HTMLã€‚åŠ©ä»¶æ˜¯è¿™æ ·çš„::

    class ProgressHelper extends AppHelper {
        public function bar($value) {
            $width = round($value / 100, 2) * 100;
            return sprintf(
                '<div class="progress-container">
                    <div class="progress-bar" style="width: %s%%"></div>
                </div>', $width);
        }
    }

è¿™æ˜¯ä¸ªå¾ˆç®€å?•çš„ä¾‹å­?ï¼Œä¸?è¿‡å?¯ä»¥å±•ç¤ºå¦‚ä½•åˆ›å»ºç®€å?•çš„æµ‹è¯•ç”¨ä¾‹ã€‚åˆ›å»ºå¹¶ä¿?å­˜åŠ©ä»¶å?Žï¼Œæˆ‘ä»¬æ?¥
åˆ›å»ºæµ‹è¯•ç”¨ä¾‹æ–‡ä»¶ ``app/Test/Case/View/Helper/ProgressHelperTest.php``ã€‚åœ¨è¯¥æ–‡ä»¶
ä¸­æˆ‘ä»¬ä»¥å¦‚ä¸‹ä»£ç ?å¼€å§‹::

    App::uses('Controller', 'Controller');
    App::uses('View', 'View');
    App::uses('ProgressHelper', 'View/Helper');

    class ProgressHelperTest extends CakeTestCase {
        public function setUp() {

        }

        public function testBar() {

        }
    }

æˆ‘ä»¬å¾ˆå¿«å°±ä¼šå¡«å……è¿™ä¸ªéª¨æž¶ã€‚æˆ‘ä»¬ä¸€å¼€å§‹å°±æ·»åŠ äº†ä¸¤ä¸ªæ–¹æ³•ã€‚ç¬¬ä¸€ä¸ªæ˜¯ ``setUp()``ã€‚è¿™ä¸ª
æ–¹æ³•ä¼šåœ¨æµ‹è¯•ç”¨ä¾‹ç±»ä¸­çš„æ¯?ä¸ª *æµ‹è¯•* æ–¹æ³•è¢«è°ƒç”¨ä¹‹å‰?è°ƒç”¨ã€‚setUp æ–¹æ³•åº”å½“åˆ?å§‹åŒ–æµ‹è¯•
éœ€è¦?çš„å¯¹è±¡ï¼Œå?šä»»ä½•éœ€è¦?çš„é…?ç½®ã€‚åœ¨æˆ‘ä»¬çš„ setUp æ–¹æ³•ä¸­ï¼Œæˆ‘ä»¬æ·»åŠ å¦‚ä¸‹ä»£ç ?::

    public function setUp() {
        parent::setUp();
        $Controller = new Controller();
        $View = new View($Controller);
        $this->Progress = new ProgressHelper($View);
    }

åœ¨æµ‹è¯•ç”¨ä¾‹ä¸­è°ƒç”¨çˆ¶ç±»æ–¹æ³•å¾ˆé‡?è¦?ï¼Œå› ä¸º CakeTestCase::setUp() æ–¹æ³•ä¼šå?šä¸€äº›äº‹æƒ…ï¼Œ
æ¯”å¦‚å¤‡ä»½ :php:class:`Configure` ç±»ä¸­çš„å€¼ï¼Œä»¥å?Šä¿?å­˜ :php:class:`App` ç±»ä¸­çš„è·¯å¾„ã€‚

æŽ¥ä¸‹æ?¥ï¼Œæˆ‘ä»¬è¦?å¡«å†™æµ‹è¯•æ–¹æ³•ã€‚æˆ‘ä»¬ä¼šä½¿ç”¨ä¸€äº›æ–­è¨€(*assertion*)æ?¥ç¡®ä¿?æˆ‘ä»¬çš„ä»£ç ?ç”Ÿæˆ?
äº†æˆ‘ä»¬å¸Œæœ›çš„è¾“å‡º::

    public function testBar() {
        $result = $this->Progress->bar(90);
        $this->assertContains('width: 90%', $result);
        $this->assertContains('progress-bar', $result);

        $result = $this->Progress->bar(33.3333333);
        $this->assertContains('width: 33%', $result);
    }

ä¸Šè¿°æµ‹è¯•å¾ˆç®€å?•ï¼Œä½†è¯´æ˜Žäº†ä½¿ç”¨æµ‹è¯•ç”¨ä¾‹çš„æ½œåœ¨å¥½å¤„ã€‚æˆ‘ä»¬ç”¨ ``assertContains()`` æ?¥
ç¡®ä¿?åŠ©ä»¶è¿”å›žçš„å­—ç¬¦ä¸²åŒ…å?«æˆ‘ä»¬æœŸæœ›çš„å†…å®¹ã€‚å¦‚æžœç»“æžœä¸?åŒ…å?«æœŸæœ›çš„å†…å®¹ï¼Œæµ‹è¯•å°±ä¼šå¤±è´¥ï¼Œ
æˆ‘ä»¬å°±çŸ¥é?“æˆ‘ä»¬çš„ä»£ç ?ä¸?å¯¹äº†ã€‚

ä½¿ç”¨æµ‹è¯•ç”¨ä¾‹ï¼Œå°±èƒ½å®¹æ˜“åœ°æ??è¿°ä¸€ç»„å·²çŸ¥è¾“å…¥å’Œå®ƒä»¬æœŸæœ›çš„è¾“å‡ºä¹‹é—´çš„å…³ç³»ã€‚è¿™å?¯ä»¥å¸®åŠ©ä½ 
å¯¹æ­£åœ¨ç¼–å†™çš„ä»£ç ?æ›´æœ‰ä¿¡å¿ƒï¼Œå› ä¸ºä½ å?¯ä»¥å®¹æ˜“åœ°æ£€æŸ¥ä½ å†™çš„ä»£ç ?æ»¡è¶³æµ‹è¯•æ‰€å?šçš„æœŸæœ›å’Œæ–­è¨€ã€‚
è€Œä¸”ï¼Œå› ä¸ºæµ‹è¯•æ˜¯ä»£ç ?ï¼Œæ— è®ºä½•æ—¶ä½ å?šäº†ä¸€å¤„æ”¹åŠ¨ï¼Œå®ƒä»¬éƒ½å¾ˆå®¹æ˜“å†?æ¬¡è¿?è¡Œã€‚è¿™å?¯ä»¥å¸®åŠ©
é˜²æ­¢æ–°é”™è¯¯(*bug*)çš„å‡ºçŽ°ã€‚

.. _running-tests:

è¿?è¡Œæµ‹è¯•
========

ä¸€æ—¦å®‰è£…äº† PHPUnitï¼Œå†™äº†ä¸€äº›æµ‹è¯•ç”¨ä¾‹ï¼Œä½ å°±åº”å½“å¾ˆé¢‘ç¹?åœ°è¿?è¡Œæµ‹è¯•ç”¨ä¾‹ã€‚åœ¨æ??äº¤ä»»ä½•
æ”¹åŠ¨ä¹‹å‰?è¿?è¡Œæµ‹è¯•æ¯”è¾ƒå¥½ï¼Œå?¯ä»¥å¸®åŠ©ç¡®ä¿?ä½ æ²¡æœ‰ç ´å??ä»»ä½•ä¸œè¥¿ã€‚

ä»Žæµ?è§ˆå™¨è¿?è¡Œæµ‹è¯•
----------------

CakePHP æ??ä¾›äº† web ç•Œé?¢æ?¥è¿?è¡Œæµ‹è¯•ï¼Œè¿™æ ·ï¼Œå¦‚æžœä½ è§‰å¾—è¿™æ ·çš„çŽ¯å¢ƒæ›´èˆ’æœ?ï¼Œå?¯ä»¥é€šè¿‡
æµ?è§ˆå™¨è¿?è¡Œæµ‹è¯•ã€‚ä½ å?¯ä»¥é€šè¿‡æµ?è§ˆ ``http://localhost/your_app/test.php`` æ?¥è®¿é—® web
è¿?è¡Œå™¨ã€‚test.php çš„ç¡®åˆ‡ä½?ç½®æ ¹æ?®ä½ çš„è®¾ç½®è€Œå?˜åŒ–ï¼Œä¸?è¿‡è¯¥æ–‡ä»¶å’Œ ``index.php`` åœ¨
å?Œä¸€çº§ã€‚

ä¸€æ—¦åŠ è½½äº†æµ‹è¯•è¿?è¡Œå™¨ï¼Œå°±å?¯ä»¥åœ¨ Appã€?Core å’Œ Plugin æµ‹è¯•å¥—ä»¶ä¹‹é—´åˆ‡æ?¢ã€‚ç‚¹å‡»å?•ä¸ª
æµ‹è¯•ç”¨ä¾‹å°±ä¼šè¿?è¡Œè¯¥æµ‹è¯•ï¼Œå¹¶æ˜¾ç¤ºç»“æžœã€‚

æŸ¥çœ‹ä»£ç ?è¦†ç›–
~~~~~~~~~~~~

å¦‚æžœä½ å®‰è£…äº† `Xdebug <http://xdebug.org>`_ï¼Œå°±å?¯ä»¥æŸ¥çœ‹ä»£ç ?è¦†ç›–çš„ç»“æžœã€‚ä»£ç ?è¦†ç›–
å?¯ä»¥å‘Šè¯‰ä½ ï¼Œä½ çš„æµ‹è¯•æ²¡æœ‰è§¦å?Šä»£ç ?çš„å“ªéƒ¨åˆ†ã€‚è¦†ç›–çŽ‡ç”¨äºŽå†³å®šä»Šå?Žåœ¨å“ªé‡Œè¿˜åº”å½“æ·»åŠ æµ‹è¯•ï¼Œ
å¹¶ç»™ä½ ä¸€ä¸ªåº¦é‡?æ?¥ç›‘æµ‹ä½ æµ‹è¯•çš„è¿›å±•ã€‚

.. |Code Coverage| image:: /_static/img/code-coverage.png

|Code Coverage|

å†…åµŒçš„ä»£ç ?è¦†ç›–ä½¿ç”¨ç»¿è‰²è¡Œæ?¥è¡¨ç¤ºè¿?è¡Œè¿‡çš„è¡Œã€‚å¦‚æžœæŠŠé¼ æ ‡æ‚¬å?œåœ¨ä¸€ä¸ªç»¿è‰²çš„è¡Œä¸Šï¼Œä¼šæœ‰
æ??ç¤ºè¯´æ˜Žå“ªäº›æµ‹è¯•è¦†ç›–äº†è¯¥è¡Œã€‚çº¢è‰²çš„è¡Œæ²¡æœ‰è¿?è¡Œï¼Œå?³æ²¡æœ‰è¢«æµ‹è¯•æ£€éªŒã€‚ç?°è‰²çš„è¡Œè¢« 
Xdebug è®¤ä¸ºæ˜¯æ— æ³•è¿?è¡Œçš„ä»£ç ?ã€‚

.. _run-tests-from-command-line:

ä»Žå‘½ä»¤è¡Œè¿?è¡Œæµ‹è¯•
----------------

CakePHP æ??ä¾› ``test`` å¤–å£³(*shell*)æ?¥è¿?è¡Œæµ‹è¯•ã€‚ä½ å?¯ä»¥ç”¨ test å¤–å£³å®¹æ˜“åœ°è¿?è¡Œ appã€?
core å’Œæ?’ä»¶çš„æµ‹è¯•ã€‚å®ƒä¹ŸæŽ¥å?—é€šå¸¸ PHPUnit å‘½ä»¤è¡ŒæœŸæœ›çš„çš„æ‰€æœ‰å?‚æ•°ã€‚ä»Ž app ç›®å½•ï¼Œ
å?¯ä»¥è±¡ä¸‹é?¢è¿™æ ·æ?¥è¿?è¡Œæµ‹è¯•::

    # è¿?è¡Œ app ä¸­çš„æ¨¡åž‹æµ‹è¯•
    ./Console/cake test app Model/Article

    # è¿?è¡Œæ?’ä»¶ä¸­çš„ç»„ä»¶æµ‹è¯•
    ./Console/cake test DebugKit Controller/Component/ToolbarComponent

    # è¿?è¡Œ CakePHP ä¸­çš„ configure ç±»æµ‹è¯•
    ./Console/cake test core Core/Configure

.. note::

    å¦‚æžœä½ è¿?è¡Œä¸Žä¼šè¯?(*session*)äº¤äº’çš„æµ‹è¯•ï¼Œé€šå¸¸æœ€å¥½ä½¿ç”¨ ``--stderr`` é€‰é¡¹ã€‚è¿™
    å?¯ä»¥ä¿®æ­£ç”±äºŽ headers_sent è­¦å‘Šå¼•èµ·çš„æµ‹è¯•å¤±è´¥çš„é—®é¢˜ã€‚

.. versionchanged:: 2.1
    åœ¨ 2.1 ç‰ˆæœ¬ä¸­å¢žåŠ äº† ``test`` å¤–å£³ã€‚2.0 ç‰ˆæœ¬çš„ ``testsuite`` å¤–å£³ä»?ç„¶å?¯ä»¥ä½¿ç”¨ï¼Œ
    ä½†å»ºè®®ä½¿ç”¨æ–°è¯­æ³•ã€‚

ä¹Ÿå?¯ä»¥åœ¨é¡¹ç›®æ ¹ç›®å½•ä¸‹è¿?è¡Œ ``test`` å¤–å£³ã€‚è¿™ä¼šæ˜¾ç¤ºä½ çŽ°æœ‰å…¨éƒ¨æµ‹è¯•çš„åˆ—è¡¨ã€‚ç„¶å?Žä½ å?¯ä»¥
éš?æ„?åœ°é€‰æ‹©è¦?è¿?è¡Œçš„ä¸€ä¸ªæˆ–å¤šä¸ªæµ‹è¯•::

    # åœ¨é¡¹ç›®æ ¹ç›®å½•ä¸­è¿?è¡Œå?«å?š app çš„åº”ç”¨ç¨‹åº?ç›®å½•çš„æµ‹è¯•
    lib/Cake/Console/cake test app

    # åœ¨é¡¹ç›®æ ¹ç›®å½•ä¸­è¿?è¡Œä½?äºŽ ./myapp ç›®å½•ä¸­çš„åº”ç”¨ç¨‹åº?çš„æµ‹è¯•
    lib/Cake/Console/cake test --app myapp app

è¿‡æ»¤æµ‹è¯•ç”¨ä¾‹
~~~~~~~~~~~~

åœ¨æœ‰å¤§é‡?æµ‹è¯•ç”¨ä¾‹çš„æƒ…å†µä¸‹ï¼Œå½“ä½ è¯•å›¾ä¿®å¤?å?•ä¸ªå¤±è´¥çš„ç”¨ä¾‹æ—¶ï¼Œä¼šç»?å¸¸è¦?è¿?è¡Œæµ‹è¯•æ–¹æ³•çš„
ä¸€ä¸ªå­?é›†ã€‚ä½¿ç”¨ CLI è¿?è¡Œå™¨ï¼Œä½ å?¯ä»¥ä½¿ç”¨ä¸€ä¸ªé€‰é¡¹æ?¥è¿‡æ»¤æµ‹è¯•æ–¹æ³•::

    ./Console/cake test core Console/ConsoleOutput --filter testWriteArray

è¿‡æ»¤å?‚æ•°ä½œä¸ºå¤§å°?å†™æ•?æ„Ÿçš„æ­£åˆ™è¡¨è¾¾å¼?ï¼Œæ?¥è¿‡æ»¤è¦?è¿?è¡Œçš„æµ‹è¯•æ–¹æ³•ã€‚

ç”Ÿæˆ?ä»£ç ?è¦†ç›–çŽ‡
~~~~~~~~~~~~~~

ä½ å?¯ä»¥ä»Žå‘½ä»¤è¡Œä½¿ç”¨ PHPUnit å†…ç½®çš„ä»£ç ?è¦†ç›–å·¥å…·æ?¥ç”Ÿæˆ?ä»£ç ?è¦†ç›–æŠ¥å‘Šã€‚PHPUnit ä¼šç”Ÿæˆ?
ä¸€ç»„åŒ…å?«è¦†ç›–ç»“æžœçš„é?™æ€? HTML æ–‡ä»¶ã€‚ä½ å?¯ä»¥åƒ?ä¸‹é?¢è¿™æ ·æ?¥ç”Ÿæˆ?ä¸€ä¸ªæµ‹è¯•ç”¨ä¾‹çš„è¦†ç›–æŠ¥å‘Š::

    ./Console/cake test app Model/Article --coverage-html webroot/coverage

è¿™ä¼šæŠŠè¦†ç›–ç»“æžœæ”¾åœ¨åº”ç”¨ç¨‹åº?çš„ webroot ç›®å½•ä¸­ã€‚ä½ åº”å½“èƒ½å¤Ÿåœ¨ 
``http://localhost/your_app/coverage`` çœ‹åˆ°ç»“æžœã€‚

è¿?è¡Œä½¿ç”¨ä¼šè¯?çš„æµ‹è¯•
~~~~~~~~~~~~~~~~~~

åœ¨å‘½ä»¤è¡Œè¿?è¡Œä½¿ç”¨ä¼šè¯?çš„æµ‹è¯•æ—¶ï¼Œéœ€è¦?åŠ ä¸Š ``--stderr`` æ ‡å¿—ã€‚ä¸?è¿™ä¹ˆå?šä¼šå¯¼è‡´ä¼šè¯?æ— æ³•
å·¥ä½œã€‚PHPUnit é»˜è®¤ä¼šè¾“å‡ºæµ‹è¯•è¿›ç¨‹åˆ°æ ‡å‡†è¾“å‡º(*stdout*)ï¼Œè¿™ä¼šä½¿ PHP ä»¥ä¸ºå¤´éƒ¨ä¿¡æ?¯
å·²ç»?å?‘é€?ï¼Œä»Žè€Œé˜»æ­¢ä¼šè¯?å?¯åŠ¨ã€‚æŠŠ PHPUnit è¾“å‡ºåˆ‡æ?¢åˆ° stderrï¼Œå°±é?¿å…?äº†è¿™ä¸ªé—®é¢˜ã€‚


æµ‹è¯•ç”¨ä¾‹ç”Ÿå‘½å‘¨æœŸå›žè°ƒ
====================

æµ‹è¯•ç”¨ä¾‹æœ‰ä¸€äº›ç”Ÿå‘½å‘¨æœŸå›žè°ƒå‡½æ•°ï¼Œå?¯ä»¥åœ¨æµ‹è¯•æ—¶ä½¿ç”¨ï¼š

* ``setUp`` åœ¨æ¯?ä¸ªæµ‹è¯•æ–¹æ³•ä¹‹å‰?è°ƒç”¨ã€‚åº”å½“ç”¨æ?¥åˆ›å»ºè¦?æµ‹è¯•çš„å¯¹è±¡ï¼Œä¸ºæµ‹è¯•åˆ?å§‹åŒ–ä»»ä½•
  æ•°æ?®ã€‚è®°å¾—ä¸€å®šè¦?è°ƒç”¨ ``parent::setUp()``ã€‚
* ``tearDown`` åœ¨æ¯?ä¸ªæµ‹è¯•æ–¹æ³•ä¹‹å?Žè°ƒç”¨ã€‚åº”å½“ç”¨æ?¥åœ¨æµ‹è¯•å®Œæˆ?ä¹‹å?Žè¿›è¡Œæ¸…ç?†ã€‚è®°å¾—ä¸€å®š
  è¦?è°ƒç”¨  ``parent::tearDown()``ã€‚
* ``setupBeforeClass`` åœ¨ä¸€ä¸ªç”¨ä¾‹ä¸­çš„æµ‹è¯•æ–¹æ³•å¼€å§‹ä¹‹å‰?å?ªè°ƒç”¨ä¸€æ¬¡ã€‚è¯¥æ–¹æ³•å¿…é¡»æ˜¯
  *é?™æ€?çš„*ã€‚
* ``tearDownAfterClass`` åœ¨ä¸€ä¸ªç”¨ä¾‹ä¸­çš„æµ‹è¯•æ–¹æ³•å®Œæˆ?ä¹‹å?Žå?ªè°ƒç”¨ä¸€æ¬¡ã€‚è¯¥æ–¹æ³•å¿…é¡»æ˜¯
  *é?™æ€?çš„*ã€‚

æµ‹è¯•å¤¹å…·
========

å½“æµ‹è¯•ä»£ç ?ä¾?èµ–äºŽæ¨¡åž‹å’Œæ•°æ?®åº“æ—¶ï¼Œå?¯ä»¥ä½¿ç”¨ **æµ‹è¯•å¤¹å…·(fixture)** æ?¥ç”Ÿæˆ?ä¸´æ—¶æ•°æ?®åº“
è¡¨ï¼ŒåŠ è½½æ ·ä¾‹æ•°æ?®ï¼Œç”¨äºŽæµ‹è¯•ã€‚ä½¿ç”¨æµ‹è¯•å¤¹å…·çš„å¥½å¤„æ˜¯ï¼Œä½ çš„æµ‹è¯•ä¸?ä¼šç ´å??åœ¨çº¿çš„åº”ç”¨ç¨‹åº?
æ•°æ?®ã€‚è€Œä¸”ï¼Œåœ¨çœŸçš„ä¸ºåº”ç”¨ç¨‹åº?å¼€å?‘å®žé™…å†…å®¹ä¹‹å‰?ï¼Œä½ å°±å?¯ä»¥æµ‹è¯•ä½ çš„ä»£ç ?ã€‚

CakePHP ä½¿ç”¨ ``app/Config/database.php`` é…?ç½®æ–‡ä»¶ä¸­çš„å??ä¸º ``$test`` çš„(æ•°æ?®åº“)
è¿žæŽ¥ã€‚å¦‚æžœè¯¥è¿žæŽ¥æ— æ³•ä½¿ç”¨ï¼Œå°†å¼•å?‘ä¸€ä¸ªå¼‚å¸¸ï¼Œå°±æ— æ³•ä½¿ç”¨æ•°æ?®åº“å¤¹å…·äº†ã€‚

åœ¨ä¸€ä¸ªåŸºäºŽå¤¹å…·çš„æµ‹è¯•ç”¨ä¾‹çš„è¿?è¡Œè¿‡ç¨‹ä¸­ï¼ŒCakePHP æ‰§è¡Œä¸‹é?¢çš„æ“?ä½œï¼š

#. åˆ›å»ºæ¯?ä¸ªå¤¹å…·éœ€è¦?çš„è¡¨ã€‚
#. å¦‚æžœå¤¹å…·ä¸­æ??ä¾›äº†æ•°æ?®ï¼Œç”¨æ•°æ?®å¡«å……è¡¨ã€‚
#. è¿?è¡Œæµ‹è¯•æ–¹æ³•ã€‚
#. æ¸…ç©ºå¤¹å…·çš„è¡¨ã€‚
#. ä»Žæ•°æ?®åº“åˆ é™¤å¤¹å…·çš„è¡¨ã€‚

åˆ›å»ºå¤¹å…·
--------

åœ¨åˆ›å»ºå¤¹å…·æ—¶ï¼Œä¸»è¦?å®šä¹‰ä¸¤ä»¶äº‹æƒ…ï¼šå¦‚ä½•åˆ›å»ºè¡¨(è¡¨é‡Œæœ‰å“ªäº›å­—æ®µ)ï¼Œå“ªäº›è®°å½•è¦?é¦–å…ˆå¡«å……åˆ°
è¡¨ä¸­ã€‚è®©æˆ‘ä»¬æ?¥åˆ›å»ºç¬¬ä¸€ä¸ªå¤¹å…·ï¼Œç”¨äºŽæµ‹è¯• Article æ¨¡åž‹ã€‚åœ¨ ``app/Test/Fixture`` 
ç›®å½•ä¸­åˆ›å»ºä»¥ä¸‹å†…å®¹çš„æ–‡ä»¶ ``ArticleFixture.php``::

    class ArticleFixture extends CakeTestFixture {

          // å?¯é€‰ã€‚
          // è®¾ç½®è¯¥å±žæ€§æ?¥åŠ è½½å¤¹å…·åˆ°ä¸?å?Œçš„æµ‹è¯•æ•°æ?®æº?
          public $useDbConfig = 'test';
          public $fields = array(
              'id' => array('type' => 'integer', 'key' => 'primary'),
              'title' => array(
                'type' => 'string',
                'length' => 255,
                'null' => false
              ),
              'body' => 'text',
              'published' => array(
                'type' => 'integer',
                'default' => '0',
                'null' => false
              ),
              'created' => 'datetime',
              'updated' => 'datetime'
          );
          public $records = array(
              array(
                'id' => 1,
                'title' => 'First Article',
                'body' => 'First Article Body',
                'published' => '1',
                'created' => '2007-03-18 10:39:23',
                'updated' => '2007-03-18 10:41:31'
              ),
              array(
                'id' => 2,
                'title' => 'Second Article',
                'body' => 'Second Article Body',
                'published' => '1',
                'created' => '2007-03-18 10:41:23',
                'updated' => '2007-03-18 10:43:31'
              ),
              array(
                'id' => 3,
                'title' => 'Third Article',
                'body' => 'Third Article Body',
                'published' => '1',
                'created' => '2007-03-18 10:43:23',
                'updated' => '2007-03-18 10:45:31'
              )
          );
     }

``$useDbConfig`` å±žæ€§å®šä¹‰å¤¹å…·è¦?ä½¿ç”¨çš„æ•°æ?®æº?ã€‚å¦‚æžœåº”ç”¨ç¨‹åº?ä½¿ç”¨å¤šä¸ªæ•°æ?®æº?ï¼Œä½ åº”å½“
ä½¿å¤¹å…·åŒ¹é…?æ¨¡åž‹çš„æ•°æ?®æº?ï¼Œä½†æ˜¯è¦?åŠ ä¸Š ``test_`` å‰?ç¼€ã€‚ä¾‹å¦‚ï¼Œå¦‚æžœæ¨¡åž‹ä½¿ç”¨ ``mydb`` 
æ•°æ?®æº?ï¼Œå¤¹å…·å°±åº”å½“ä½¿ç”¨ ``test_mydb`` æ•°æ?®æº?ã€‚å¦‚æžœ ``test_mydb`` è¿žæŽ¥ä¸?å­˜åœ¨ï¼Œæ¨¡åž‹
å°±ä¼šä½¿ç”¨é»˜è®¤çš„ ``test`` æ•°æ?®æº?ã€‚å¤¹å…·æ•°æ?®æº?å¿…é¡»å‰?ç¼€ä»¥ ``test`` æ?¥é™?ä½Žè¿?è¡Œæµ‹è¯•æ—¶
æ„?å¤–æ¸…é™¤åº”ç”¨ç¨‹åº?çš„æ‰€æœ‰æ•°æ?®çš„å?¯èƒ½æ€§ã€‚

æˆ‘ä»¬ä½¿ç”¨ ``$fields`` æ?¥æŒ‡å®šè¿™ä¸ªè¡¨æœ‰å“ªäº›å­—æ®µï¼Œä»¥å?Šå®ƒä»¬æ˜¯å¦‚ä½•å®šä¹‰çš„ã€‚ç”¨æ?¥å®šä¹‰è¿™äº›
å­—æ®µçš„æ ¼å¼?å’Œ :php:class:`CakeSchema` ç±»ä½¿ç”¨çš„ç›¸å?Œã€‚å®šä¹‰è¡¨å?¯ä»¥ä½¿ç”¨çš„é”®ä¸ºï¼š

``type``
    CakePHP å†…éƒ¨çš„æ•°æ?®ç±»åž‹ã€‚å½“å‰?æ”¯æŒ?ï¼š
        - ``string``: æ˜ å°„ä¸º ``VARCHAR``
        - ``text``: æ˜ å°„ä¸º ``TEXT``
        - ``integer``: æ˜ å°„ä¸º ``INT``
        - ``float``: æ˜ å°„ä¸º ``FLOAT``
        - ``datetime``: æ˜ å°„ä¸º ``DATETIME``
        - ``timestamp``: æ˜ å°„ä¸º ``TIMESTAMP``
        - ``time``: æ˜ å°„ä¸º ``TIME``
        - ``date``: æ˜ å°„ä¸º ``DATE``
        - ``binary``: æ˜ å°„ä¸º ``BLOB``
``key``
    è®¾ç½®ä¸º ``primary`` æ?¥ä½¿è¯¥å­—æ®µ AUTO\_INCREMENTï¼Œå¹¶ä½œä¸ºè¡¨çš„ä¸»é”®ã€‚
``length``
    è®¾ç½®ä¸ºå­—æ®µéœ€è¦?çš„é•¿åº¦ã€‚
``null``
    è®¾ç½®ä¸º ``true`` (å…?è®¸ NULL) æˆ–è€… ``false`` (ä¸?å…?è®¸ NULL)ã€‚
``default``
    å­—æ®µçš„é»˜è®¤å€¼ã€‚

æˆ‘ä»¬å?¯ä»¥å®šä¹‰ä¸€ç»„è®°å½•ï¼Œåœ¨å¤¹å…·çš„è¡¨åˆ›å»ºä¹‹å?Žå¡«å……åˆ°è¡¨é‡Œã€‚å…¶æ ¼å¼?æ˜¯ç›¸å½“ç®€å?•çš„ï¼Œ
``$records`` ä¸ºè®°å½•æ•°ç»„ã€‚``$records`` ä¸­çš„æ¯?é¡¹ä¸ºä¸€è¡Œã€‚åœ¨æ¯?è¡Œä¸­ï¼Œåº”å½“æ˜¯è¯¥è¡Œçš„åˆ—å’Œ
å€¼çš„å…³è?”æ•°ç»„ã€‚å?ªæ˜¯è¦?è®°ä½? $records æ•°ç»„ä¸­çš„æ¯?æ?¡è®°é¡»æœ‰ ``$fields`` æ•°ç»„ä¸­æŒ‡å®šçš„ 
**æ¯?ä¸ª** å­—æ®µéƒ½å¿…é¡»æœ‰ä¸€ä¸ªé”®ã€‚å¦‚æžœæŸ?æ?¡è®°å½•çš„ä¸€ä¸ªå­—æ®µéœ€è¦?æœ‰ ``null`` å€¼ï¼Œå?ªéœ€æŒ‡å®š
è¯¥é”®çš„å€¼ä¸º ``null``ã€‚

åŠ¨æ€?æ•°æ?®å’Œå¤¹å…·
--------------

æ—¢ç„¶å¤¹å…·çš„è®°å½•å£°æ˜Žä¸ºç±»å±žæ€§ï¼Œå°±æ— æ³•è½»æ˜“ä½¿ç”¨å‡½æ•°æˆ–è€…å…¶å®ƒåŠ¨æ€?æ•°æ?®æ?¥å®šä¹‰å¤¹å…·ã€‚ä¸ºäº†
è§£å†³è¿™ä¸ªé—®é¢˜ï¼Œå?¯ä»¥åœ¨å¤¹å…·çš„ init() æ–¹æ³•ä¸­å®šä¹‰ ``$records``ã€‚ä¾‹å¦‚ï¼Œå¦‚æžœè¦?æ‰€æœ‰ 
created å’Œ updated æ—¶é—´æ ‡ç­¾å??åº”ä»Šå¤©çš„æ—¥æœŸï¼Œå?¯ä»¥è¿™æ ·å?š::

    class ArticleFixture extends CakeTestFixture {

        public $fields = array(
            'id' => array('type' => 'integer', 'key' => 'primary'),
            'title' => array('type' => 'string', 'length' => 255, 'null' => false),
            'body' => 'text',
            'published' => array('type' => 'integer', 'default' => '0', 'null' => false),
            'created' => 'datetime',
            'updated' => 'datetime'
        );

        public function init() {
            $this->records = array(
                array(
                    'id' => 1,
                    'title' => 'First Article',
                    'body' => 'First Article Body',
                    'published' => '1',
                    'created' => date('Y-m-d H:i:s'),
                    'updated' => date('Y-m-d H:i:s'),
                ),
            );
            parent::init();
        }
    }

å½“é‡?è½½ ``init()`` æ–¹æ³•æ—¶ï¼Œå?ªéœ€è®°å¾—ä¸€å®šè¦?è°ƒç”¨ ``parent::init()``ã€‚


å¯¼å…¥è¡¨ä¿¡æ?¯å’Œè®°å½•
----------------

åº”ç”¨ç¨‹åº?å?¯èƒ½å·²ç»?æœ‰æ­£å¸¸å·¥ä½œçš„æ¨¡åž‹å?Šç›¸å…³çš„çœŸå®žæ•°æ?®ï¼Œè€Œä½ å?¯èƒ½ä¼šå†³å®šè¦?ä½¿ç”¨è¿™äº›æ•°æ?®æ?¥
æµ‹è¯•åº”ç”¨ç¨‹åº?ã€‚è¿™æ ·å†?åœ¨å¤¹å…·ä¸­å®šä¹‰è¡¨å’Œ/æˆ–è®°å½•å°±æ˜¯é‡?å¤?çš„äº‹æƒ…äº†ã€‚å¹¸å¥½ï¼Œæœ‰åŠžæ³•ä»ŽçŽ°æœ‰
çš„æ¨¡åž‹æˆ–è¡¨æ?¥å®šä¹‰(å¤¹å…·çš„)è¡¨å’Œ/æˆ–è®°å½•ã€‚

è®©æˆ‘ä»¬ä»Žä¸€ä¸ªä¾‹å­?å¼€å§‹ã€‚å?‡å®šåœ¨åº”ç”¨ç¨‹åº?ä¸­æœ‰ä¸€ä¸ªå?«å?š Article çš„æ¨¡åž‹(æ˜ å°„åˆ°å??ä¸º 
articles çš„è¡¨)ï¼Œä¿®æ”¹å‰?ä¸€èŠ‚çš„å¤¹å…·ä¾‹å­?(``app/Test/Fixture/ArticleFixture.php``)ä¸º::

    class ArticleFixture extends CakeTestFixture {
        public $import = 'Article';
    }

è¿™å?¥è¯?å‘Šè¯‰æµ‹è¯•å¥—ä»¶ä»Žå?«å?š Article çš„æ¨¡åž‹è¿žæŽ¥çš„è¡¨å¯¼å…¥è¡¨çš„å®šä¹‰ã€‚ä½ å?¯ä»¥ä½¿ç”¨åº”ç”¨ç¨‹åº?
ä¸­çš„ä»»ä½•å?¯ä»¥ä½¿ç”¨çš„æ¨¡åž‹ã€‚è¿™æ?¡è¯­å?¥å?ªå¯¼å…¥ Article çš„æ•°æ?®ç»“æž„(*schema*)ï¼Œè€Œä¸?å¯¼å…¥
è®°å½•ã€‚è¦?å¯¼å…¥è®°å½•ï¼Œä½ å?¯ä»¥è¿™æ ·å?š::

    class ArticleFixture extends CakeTestFixture {
        public $import = array('model' => 'Article', 'records' => true);
    }

å?¦ä¸€æ–¹é?¢ï¼Œå¦‚æžœæœ‰ä¸€ä¸ªåˆ›å»ºå¥½çš„è¡¨ï¼Œè€Œæ²¡æœ‰ç›¸åº”çš„æ¨¡åž‹ï¼Œå?¯ä»¥æŒ‡å®šå¯¼å…¥è¿‡ç¨‹è¯»å?–é‚£ä¸ªè¡¨çš„
ä¿¡æ?¯ã€‚ä¾‹å¦‚::

    class ArticleFixture extends CakeTestFixture {
        public $import = array('table' => 'articles');
    }

ä¼šä½¿ç”¨å??ä¸º 'default' çš„ CakePHP æ•°æ?®åº“è¿žæŽ¥ä»Žå?«å?š 'articles' çš„è¡¨å¯¼å…¥è¡¨çš„å®šä¹‰ã€‚
å¦‚æžœè¦?ä½¿ç”¨ä¸?å?Œçš„è¿žæŽ¥ï¼Œå?¯ä»¥ä½¿ç”¨::

    class ArticleFixture extends CakeTestFixture {
        public $import = array('table' => 'articles', 'connection' => 'other');
    }

å› ä¸ºå®ƒä½¿ç”¨ CakePHP çš„æ•°æ?®åº“è¿žæŽ¥ï¼Œå¦‚æžœå£°æ˜Žäº†ä»»ä½•è¡¨å‰?ç¼€ï¼Œè¯»å?–è¡¨çš„ä¿¡æ?¯æ—¶å°±ä¼šè‡ªåŠ¨
ä½¿ç”¨è¯¥å‰?ç¼€ã€‚ä¸Šè¿°ä¸¤æ®µä»£ç ?ç‰‡æ®µä¸?ä¼šä»Žè¡¨å¯¼å…¥è®°å½•ã€‚è¦?è®©å¤¹å…·ä¹Ÿå¯¼å…¥è®°å½•ï¼ŒæŠŠå¯¼å…¥æ”¹ä¸º::

    class ArticleFixture extends CakeTestFixture {
        public $import = array('table' => 'articles', 'records' => true);
    }

ä¹Ÿå?¯ä»¥å¾ˆè‡ªç„¶åœ°ä»ŽçŽ°æœ‰çš„æ¨¡åž‹/è¡¨å¯¼å…¥è¡¨çš„å®šä¹‰ï¼Œä½†æ˜¯è±¡å‰?ä¸€èŠ‚æ‰€ç¤ºçš„é‚£æ ·ç›´æŽ¥åœ¨å¤¹å…·ä¸­
å®šä¹‰è®°å½•ã€‚ä¾‹å¦‚::

    class ArticleFixture extends CakeTestFixture {
        public $import = 'Article';
        public $records = array(
            array(
              'id' => 1,
              'title' => 'First Article',
              'body' => 'First Article Body',
              'published' => '1',
              'created' => '2007-03-18 10:39:23',
              'updated' => '2007-03-18 10:41:31'
            ),
            array(
              'id' => 2,
              'title' => 'Second Article',
              'body' => 'Second Article Body',
              'published' => '1',
              'created' => '2007-03-18 10:41:23',
              'updated' => '2007-03-18 10:43:31'
            ),
            array(
              'id' => 3,
              'title' => 'Third Article',
              'body' => 'Third Article Body',
              'published' => '1',
              'created' => '2007-03-18 10:43:23',
              'updated' => '2007-03-18 10:45:31'
            )
        );
    }

åœ¨æµ‹è¯•ç”¨ä¾‹ä¸­åŠ è½½å¤¹å…·
--------------------

å¤¹å…·åˆ›å»ºå¥½ä¹‹å?Žï¼Œå°±è¦?åœ¨æµ‹è¯•ç”¨ä¾‹ä¸­ä½¿ç”¨ã€‚åœ¨æ¯?ä¸ªæµ‹è¯•ç”¨ä¾‹ä¸­åº”å½“åŠ è½½éœ€è¦?çš„å¤¹å…·ã€‚å¯¹æ¯?ä¸ª
è¦?è¿?è¡ŒæŸ¥è¯¢è¯­å?¥çš„æ¨¡åž‹éƒ½åº”å½“åŠ è½½å¤¹å…·ã€‚è¦?åŠ è½½å¤¹å…·ï¼Œåœ¨æ¨¡åž‹ä¸­å®šä¹‰ ``$fixtures`` å±žæ€§::

    class ArticleTest extends CakeTestCase {
        public $fixtures = array('app.article', 'app.comment');
    }

ä¸Šè¿°ä»£ç ?ä¼šä»Žåº”ç”¨ç¨‹åº?çš„ Fixture ç›®å½•åŠ è½½ Article å’Œ Comment å¤¹å…·ã€‚ä¹Ÿå?¯ä»¥ä»Ž
CakePHP æ ¸å¿ƒæˆ–æ?’ä»¶ä¸­åŠ è½½å¤¹å…·::

    class ArticleTest extends CakeTestCase {
        public $fixtures = array('plugin.debug_kit.article', 'core.comment');
    }

ä½¿ç”¨ ``core`` å‰?ç¼€ä¼šä»Ž CakePHP åŠ è½½å¤¹å…·ï¼Œä½¿ç”¨æ?’ä»¶å??ç§°ä½œä¸ºå‰?ç¼€ä¼šä»Žè¯¥å‘½å??çš„æ?’ä»¶ä¸­
åŠ è½½å¤¹å…·ã€‚

ä½ å?¯ä»¥è®¾ç½® :php:attr:`CakeTestCase::$autoFixtures` ä¸º ``false`` æ?¥æŽ§åˆ¶ä½•æ—¶åŠ è½½
å¤¹å…·ï¼Œä¹‹å?Žå†?ç”¨ :php:meth:`CakeTestCase::loadFixtures()` æ?¥åŠ è½½::

    class ArticleTest extends CakeTestCase {
        public $fixtures = array('app.article', 'app.comment');
        public $autoFixtures = false;

        public function testMyFunction() {
            $this->loadFixtures('Article', 'Comment');
        }
    }

ä»Ž 2.5.0 ç‰ˆæœ¬å¼€å§‹ï¼Œå?¯ä»¥åŠ è½½åœ¨å­?ç›®å½•ä¸­çš„å¤¹å…·ã€‚å¦‚æžœä½ æœ‰ä¸€ä¸ªå¤§åž‹çš„åº”ç”¨ç¨‹åº?ï¼Œä½¿ç”¨
å¤šä¸ªç›®å½•å?¯ä»¥æ›´å®¹æ˜“åœ°ç»„ç»‡å¤¹å…·ã€‚è¦?åŠ è½½å­?ç›®å½•ä¸­çš„å¤¹å…·ï¼Œå?ªéœ€åœ¨å¤¹å…·å??ç§°ä¸­åŒ…æ‹¬å­?ç›®å½•
å??ç§°::

    class ArticleTest extends CakeTestCase {
        public $fixtures = array('app.blog/article', 'app.blog/comment');
    }

åœ¨ä¸Šè¿°ä¾‹å­?ä¸­ï¼Œä¸¤ä¸ªå¤¹å…·éƒ½ä¼šä»Ž ``App/Test/Fixture/blog/`` ç›®å½•ä¸­åŠ è½½ã€‚

.. versionchanged:: 2.5
    ä»Ž 2.5.0 ç‰ˆæœ¬å¼€å§‹ï¼Œå?¯ä»¥åŠ è½½åœ¨å­?ç›®å½•ä¸­çš„å¤¹å…·ã€‚

æµ‹è¯•æ¨¡åž‹
========

æ¯”å¦‚è¯´æˆ‘ä»¬å·²ç»?æœ‰äº†åœ¨æ–‡ä»¶ ``app/Model/Article.php`` ä¸­å®šä¹‰çš„ Article æ¨¡åž‹ï¼Œæ˜¯è¿™æ ·
çš„::

    class Article extends AppModel {
        public function published($fields = null) {
            $params = array(
                'conditions' => array(
                    $this->name . '.published' => 1
                ),
                'fields' => $fields
            );

            return $this->find('all', $params);
        }
    }

çŽ°åœ¨è¦?å»ºç«‹ä½¿ç”¨è¿™ä¸ªæ¨¡åž‹çš„æµ‹è¯•ï¼Œä½†æ˜¯è¦?é€šè¿‡å¤¹å…·ï¼Œæ?¥æµ‹è¯•æ¨¡åž‹ä¸­çš„ä¸€äº›åŠŸèƒ½ã€‚CakePHP 
æµ‹è¯•å¥—ä»¶å?ªåŠ è½½æœ€å°‘çš„ä¸€ç»„æ–‡ä»¶(æ?¥ä¿?æŒ?æµ‹è¯•ç‹¬ç«‹)ï¼Œè¿™æ ·æˆ‘ä»¬å¿…é¡»ç”±åŠ è½½æ¨¡åž‹å¼€å§‹ â€” åœ¨
è¿™é‡Œå°±æ˜¯æˆ‘ä»¬å·²ç»?å®šä¹‰äº†çš„ Article æ¨¡åž‹ã€‚

çŽ°åœ¨åœ¨ç›®å½• ``app/Test/Case/Model`` ä¸­æ?¥åˆ›å»ºæ–‡ä»¶ ``ArticleTest.php``ï¼ŒåŒ…å?«å¦‚ä¸‹
å†…å®¹::

    App::uses('Article', 'Model');

    class ArticleTest extends CakeTestCase {
        public $fixtures = array('app.article');
    }

åœ¨æµ‹è¯•ç”¨ä¾‹çš„å?˜é‡? ``$fixtures`` ä¸­å®šä¹‰ä¸€ç»„è¦?ä½¿ç”¨çš„å¤¹å…·ã€‚åº”å½“è®°å¾—åŒ…å?«æ‰€æœ‰è¦?è¿?è¡Œ
æŸ¥è¯¢çš„å¤¹å…·ã€‚

.. note::
    ä½ å?¯ä»¥é€šè¿‡æŒ‡å®š ``$useDbConfig`` å±žæ€§æ?¥è¦†ç›–æµ‹è¯•æ¨¡åž‹æ•°æ?®åº“ã€‚ç¡®ä¿?ç›¸å…³çš„å¤¹å…·ä½¿ç”¨
    ç›¸å?Œçš„å€¼ï¼Œè¿™æ ·æ‰?ä¼šåœ¨æ­£ç¡®çš„æ•°æ?®åº“ä¸­åˆ›å»ºè¡¨ã€‚

åˆ›å»ºæµ‹è¯•æ–¹æ³•
------------

çŽ°åœ¨è®©æˆ‘ä»¬æ·»åŠ ä¸€ä¸ªæ–¹æ³•æ?¥æµ‹è¯• Article æ¨¡åž‹ä¸­çš„å‡½æ•° published()ã€‚ç¼–è¾‘æ–‡ä»¶ 
``app/Test/Case/Model/ArticleTest.php``ï¼Œè®©å®ƒè±¡è¿™æ ·::

    App::uses('Article', 'Model');

    class ArticleTest extends CakeTestCase {
        public $fixtures = array('app.article');

        public function setUp() {
            parent::setUp();
            $this->Article = ClassRegistry::init('Article');
        }

        public function testPublished() {
            $result = $this->Article->published(array('id', 'title'));
            $expected = array(
                array('Article' => array('id' => 1, 'title' => 'First Article')),
                array('Article' => array('id' => 2, 'title' => 'Second Article')),
                array('Article' => array('id' => 3, 'title' => 'Third Article'))
            );

            $this->assertEquals($expected, $result);
        }
    }

ä½ å?¯ä»¥çœ‹åˆ°æˆ‘ä»¬æ·»åŠ äº†æ–¹æ³• ``testPublished()``ã€‚æˆ‘ä»¬å¼€å§‹å…ˆåˆ›å»ºä¸€ä¸ª ``Article`` 
æ¨¡åž‹çš„å®žä¾‹ï¼Œç„¶å?Žè¿?è¡Œ ``published()`` æ–¹æ³•ã€‚åœ¨å?˜é‡? ``$expected`` ä¸­è®¾ç½®æˆ‘ä»¬æœŸæœ›çš„
æ­£ç¡®ç»“æžœ(æˆ‘ä»¬çŸ¥é?“æ˜¯å› ä¸ºæˆ‘ä»¬å®šä¹‰äº†å¼€å§‹è¦?å¡«å……åˆ°æ–‡ç« (*artilce*)è¡¨ä¸­çš„è®°å½•ã€‚)æˆ‘ä»¬
ä½¿ç”¨ ``assertEquals`` æ–¹æ³•æµ‹è¯•ç»“æžœç­‰äºŽæˆ‘ä»¬çš„æœŸæœ›ã€‚æ¬²çŸ¥å¦‚ä½•è¿?è¡Œæµ‹è¯•ç”¨ä¾‹ï¼Œè¯·å?‚è€ƒ 
:ref:`running-tests` ä¸€èŠ‚ã€‚

.. note::

    åœ¨ä¸ºæµ‹è¯•è®¾ç½®æ¨¡åž‹æ—¶ï¼Œä¸€å®šè¦?ä½¿ç”¨ ``ClassRegistry::init('YourModelName');``ï¼Œ
    å› ä¸ºå®ƒçŸ¥é?“è¦?ä½¿ç”¨æµ‹è¯•æ•°æ?®åº“è¿žæŽ¥ã€‚

æ¨¡æ‹Ÿæ¨¡åž‹æ–¹æ³•
------------

æœ‰æ—¶åœ¨æµ‹è¯•æ¨¡åž‹çš„æ–¹æ³•æ—¶ä½ è¦?æ¨¡æ‹Ÿè¿™äº›æ–¹æ³•ã€‚ä½ åº”å½“ä½¿ç”¨ ``getMockForModel`` æ–¹æ³•æ?¥
åˆ›å»ºæ¨¡åž‹çš„æµ‹è¯•æ¨¡æ‹Ÿã€‚è¿™é?¿å…?äº†é€šå¸¸æ¨¡æ‹Ÿå¯¹è±¡æœ‰çš„å??å°„å±žæ€§çš„é—®é¢˜::

    public function testSendingEmails() {
        $model = $this->getMockForModel('EmailVerification', array('send'));
        $model->expects($this->once())
            ->method('send')
            ->will($this->returnValue(true));

        $model->verifyEmail('test@example.com');
    }

.. versionadded:: 2.3
    åœ¨ 2.3 ç‰ˆæœ¬ä¸­å¢žåŠ äº† CakeTestCase::getMockForModel()ã€‚

æµ‹è¯•æŽ§åˆ¶å™¨
==========

è™½ç„¶ä½ å?¯ä»¥ç”¨å’ŒåŠ©ä»¶(*Helper*)ã€?æ¨¡åž‹(*Model*)å’Œç»„ä»¶(*Component*)ç›¸å?Œçš„æ–¹å¼?æµ‹è¯•
æŽ§åˆ¶å™¨ç±»ï¼ŒCakePHP æ??ä¾›äº†ç‰¹åˆ«çš„ ``ControllerTestCase`` ç±»ã€‚ç”¨è¯¥ç±»ä½œä¸ºæŽ§åˆ¶å™¨æµ‹è¯•
ç”¨ä¾‹çš„åŸºç±»ï¼Œè®©ä½ å?¯ä»¥ä½¿ç”¨ ``testAction()`` æ–¹æ³•ï¼Œä½¿æµ‹è¯•ç”¨ä¾‹æ›´ç®€å?•ã€‚
``ControllerTestCase`` è®©ä½ å®¹æ˜“åœ°æ¨¡æ‹Ÿç»„ä»¶å’Œæ¨¡åž‹ï¼Œä»¥å?Šè±¡ 
:php:meth:`~Controller::redirect()` è¿™æ ·å?¯èƒ½æ›´éš¾æµ‹è¯•çš„æ–¹æ³•ã€‚

å?‡è®¾ä½ æœ‰ä¸€ä¸ªå…¸åž‹çš„ Articles æŽ§åˆ¶å™¨å’Œç›¸åº”çš„æ¨¡åž‹ã€‚æŽ§åˆ¶å™¨ä»£ç ?æ˜¯è¿™æ ·çš„::

    App::uses('AppController', 'Controller');
    
    class ArticlesController extends AppController {
        public $helpers = array('Form', 'Html');

        public function index($short = null) {
            if (!empty($this->request->data)) {
                $this->Article->save($this->request->data);
            }
            if (!empty($short)) {
                $result = $this->Article->find('all', array('id', 'title'));
            } else {
                $result = $this->Article->find('all');
            }

            if (isset($this->params['requested'])) {
                return $result;
            }

            $this->set('title', 'Articles');
            $this->set('articles', $result);
        }
    }

åœ¨ ``app/Test/Case/Controller`` ç›®å½•ä¸­åˆ›å»ºä¸€ä¸ªå??ä¸º 
``ArticlesControllerTest.php`` çš„æ–‡ä»¶ï¼Œæ”¾å…¥ä»¥ä¸‹ä»£ç ?::

    class ArticlesControllerTest extends ControllerTestCase {
        public $fixtures = array('app.article');

        public function testIndex() {
            $result = $this->testAction('/articles/index');
            debug($result);
        }

        public function testIndexShort() {
            $result = $this->testAction('/articles/index/short');
            debug($result);
        }

        public function testIndexShortGetRenderedHtml() {
            $result = $this->testAction(
               '/articles/index/short',
                array('return' => 'contents')
            );
            debug($result);
        }

        public function testIndexShortGetViewVars() {
            $result = $this->testAction(
                '/articles/index/short',
                array('return' => 'vars')
            );
            debug($result);
        }

        public function testIndexPostData() {
            $data = array(
                'Article' => array(
                    'user_id' => 1,
                    'published' => 1,
                    'slug' => 'new-article',
                    'title' => 'New Article',
                    'body' => 'New Body'
                )
            );
            $result = $this->testAction(
                '/articles/index',
                array('data' => $data, 'method' => 'post')
            );
            debug($result);
        }
    }

è¿™ä¸ªä¾‹å­?å±•ç¤ºäº†ä¸€äº›ä½¿ç”¨ testAction æ–¹æ³•æµ‹è¯•æŽ§åˆ¶å™¨çš„æ–¹å¼?ã€‚``testAction`` æ–¹æ³•çš„
ç¬¬ä¸€ä¸ªå?‚æ•°åº”å½“æ€»æ˜¯è¦?æµ‹è¯•çš„ç½‘å?€(*URL*)ã€‚CakePHP ä¼šåˆ›å»ºä¸€ä¸ªè¯·æ±‚ï¼Œè°ƒåº¦(*dispatch*)
æŽ§åˆ¶å™¨å’ŒåŠ¨ä½œã€‚

åœ¨æµ‹è¯•åŒ…å?« ``redirect()`` æ–¹æ³•å’Œå…¶å®ƒåœ¨é‡?å®šå?‘(*redirect*)ä¹‹å?Žçš„ä»£ç ?ï¼Œé€šå¸¸æ›´å¥½çš„
å?šæ³•æ˜¯åœ¨é‡?å®šå?‘æ—¶è¿”å›žã€‚è¿™æ˜¯å› ä¸ºï¼Œ``redirect()`` æ–¹æ³•åœ¨æµ‹è¯•ä¸­æ˜¯æ¨¡æ‹Ÿçš„ï¼Œå¹¶ä¸?åƒ?æ­£å¸¸
çŠ¶æ€?æ˜¯å­˜åœ¨çš„ã€‚å®ƒä¸?ä¼šä½¿ä»£ç ?é€€å‡ºï¼Œè€Œæ˜¯ç»§ç»­è¿?è¡Œé‡?å®šå?‘ä¹‹å?Žçš„ä»£ç ?ã€‚ä¾‹å¦‚::

    App::uses('AppController', 'Controller');
    
    class ArticlesController extends AppController {
        public function add() {
            if ($this->request->is('post')) {
                if ($this->Article->save($this->request->data)) {
                    $this->redirect(array('action' => 'index'));
                }
            }
            // æ›´å¤šä»£ç ?
        }
    }

å½“æµ‹è¯•ä¸Šè¿°ä»£ç ?æ—¶ï¼Œå°±ç®—é?‡åˆ°é‡?å®šå?‘ï¼Œä¹Ÿè¿˜æ˜¯ä¼šç»§ç»­è¿?è¡Œ ``// æ›´å¤šä»£ç ?``ã€‚æ‰€ä»¥ï¼Œåº”å½“
è¿™æ ·å†™ä»£ç ?::

    App::uses('AppController', 'Controller');
    
    class ArticlesController extends AppController {
        public function add() {
            if ($this->request->is('post')) {
                if ($this->Article->save($this->request->data)) {
                    return $this->redirect(array('action' => 'index'));
                }
            }
            // æ›´å¤šä»£ç ?
        }
    }

è¿™æ ·ï¼Œ``// æ›´å¤šä»£ç ?`` å°±ä¸?ä¼šæ‰§è¡Œï¼Œå› ä¸ºä¸€åˆ°é‡?å®šå?‘é‚£é‡Œå°±ä¼šè¿”å›žäº†ã€‚

æ¨¡æ‹Ÿ GET è¯·æ±‚
-------------

æ­£å¦‚ä¸Šé?¢ ``testIndexPostData()`` çš„ä¾‹å­?ä¸­çœ‹åˆ°çš„ï¼Œå?¯ä»¥ç”¨ ``testAction()`` æ–¹æ³•æ?¥
æµ‹è¯• POST åŠ¨ä½œï¼Œä¹Ÿå?¯ä»¥æµ‹è¯• GET åŠ¨ä½œã€‚å?ªè¦?æ??ä¾›äº† ``data`` é”®ï¼Œæ??äº¤ç»™æŽ§åˆ¶å™¨çš„è¯·æ±‚
å°±ä¼šæ˜¯ POSTã€‚é»˜è®¤æƒ…å†µä¸‹ï¼Œæ‰€æœ‰çš„è¯·æ±‚éƒ½æ˜¯ POST è¯·æ±‚ã€‚å?¯ä»¥è®¾ç½® method é”®æ?¥æ¨¡æ‹Ÿ GET 
è¯·æ±‚::

    public function testAdding() {
        $data = array(
            'Post' => array(
                'title' => 'New post',
                'body' => 'Secret sauce'
            )
        );
        $this->testAction('/posts/add', array('data' => $data, 'method' => 'get'));
        // ä¸€äº›æ–­è¨€(*assertion*)ã€‚
    }

åœ¨æ¨¡æ‹Ÿ GET è¯·æ±‚æ—¶ï¼Œdata é”®ä¼šä½œä¸ºæŸ¥è¯¢å­—ç¬¦ä¸²(*query string*)å?‚æ•°ã€‚

é€‰æ‹©è¿”å›žç±»åž‹
------------

ä½ å?¯ä»¥ä»Žå¤šç§?æ–¹æ³•ä¸­é€‰æ‹©å¦‚ä½•æ£€æŸ¥æŽ§åˆ¶å™¨åŠ¨ä½œæ˜¯å?¦æˆ?åŠŸã€‚æ¯?ä¸€ç§?éƒ½æ??ä¾›äº†ä¸?å?Œçš„æ–¹æ³•æ?¥ç¡®ä¿?
ä»£ç ?æ‰§è¡Œäº†ä½ çš„æœŸæœ›ï¼š

* ``vars`` å¾—åˆ°è®¾ç½®çš„è§†å›¾(*view*)å?˜é‡?ã€‚
* ``view`` å¾—åˆ°æ¸²æŸ“çš„ä¸?å?«å¸ƒå±€(*layout*)çš„è§†å›¾ã€‚
* ``contents`` å¾—åˆ°æ¸²æŸ“çš„åŒ…å?«å¸ƒå±€(*layout*)çš„è§†å›¾ã€‚
* ``result`` å¾—åˆ°æŽ§åˆ¶å™¨åŠ¨ä½œçš„è¿”å›žå€¼ã€‚å?¯ç”¨äºŽæµ‹è¯• requestAction æ–¹æ³•ã€‚

é»˜è®¤å€¼ä¸º ``result``ã€‚å?ªè¦?è¿”å›žç±»åž‹ä¸?æ˜¯ ``result``ï¼Œä¹Ÿå?¯ä»¥åœ¨æµ‹è¯•ç”¨ä¾‹ä¸­ç”¨å±žæ€§è®¿é—®
å…¶å®ƒè¿”å›žç±»åž‹::

    public function testIndex() {
        $this->testAction('/posts/index');
        $this->assertInternalType('array', $this->vars['posts']);
    }


å’Œ testAction æ–¹æ³•ä¸€èµ·ä½¿ç”¨æ¨¡æ‹Ÿå¯¹è±¡
----------------------------------

æœ‰æ—¶ä½ è¦?ç”¨éƒ¨åˆ†æˆ–å®Œå…¨æ¨¡æ‹Ÿçš„å¯¹è±¡æ?¥ä»£æ›¿ç»„ä»¶(*component*)æˆ–è€…æ¨¡åž‹(*model*)ã€‚ä¸ºæ­¤å?¯ä»¥
ä½¿ç”¨ :php:meth:`ControllerTestCase::generate()` æ–¹æ³•ã€‚``generate()`` æ–¹æ³•ä»Ž
æŽ§åˆ¶å™¨æŽ¥è¿‡ç”Ÿæˆ?æ¨¡æ‹Ÿçš„å›°éš¾å·¥ä½œã€‚å¦‚æžœä½ å†³å®šè¦?ç”Ÿæˆ?ç”¨äºŽæµ‹è¯•çš„æŽ§åˆ¶å™¨ï¼Œä½ å?¯ä»¥ä¸€èµ·ç”Ÿæˆ?
æ¨¡æ‹Ÿç‰ˆæœ¬çš„æ¨¡åž‹å’Œç»„ä»¶::

    $Posts = $this->generate('Posts', array(
        'methods' => array(
            'isAuthorized'
        ),
        'models' => array(
            'Post' => array('save')
        ),
        'components' => array(
            'RequestHandler' => array('isPut'),
            'Email' => array('send'),
            'Session'
        )
    ));

ä¸Šé?¢çš„ä»£ç ?ä¼šåˆ›å»ºæ¨¡æ‹Ÿçš„ ``PostsController`` æŽ§åˆ¶å™¨ï¼Œå¸¦æœ‰ ``isAuthorized`` æ–¹æ³•ã€‚
é™„å¸¦çš„ Post æ¨¡åž‹ä¼šæœ‰ ``save()`` æ–¹æ³•ï¼Œè€Œé™„å¸¦çš„ç»„ä»¶ä¼šæœ‰ç›¸åº”çš„æ–¹æ³•ã€‚å?¯ä»¥é€‰æ‹©ä¸?ä¼ é€’
æ–¹æ³•æ?¥æ¨¡æ‹Ÿæ•´ä¸ªç±»ï¼Œå°±åƒ?ä¸Šé?¢ä¾‹å­?ä¸­çš„ Sessionã€‚

ç”Ÿæˆ?çš„æŽ§åˆ¶å™¨è‡ªåŠ¨ä½œä¸ºæµ‹è¯•æŽ§åˆ¶å™¨ï¼Œç”¨äºŽæµ‹è¯•ã€‚è¦?å?¯ç”¨è‡ªåŠ¨ç”Ÿæˆ?ï¼Œè®¾ç½®æµ‹è¯•ç”¨ä¾‹çš„ 
``autoMock`` å?˜é‡?ä¸º trueã€‚å¦‚æžœ ``autoMock`` ä¸º falseï¼Œæµ‹è¯•å°±ä¼šä½¿ç”¨åŽŸæ?¥çš„æŽ§åˆ¶å™¨ã€‚

ç”Ÿæˆ?çš„æŽ§åˆ¶å™¨ä¸­çš„ response å¯¹è±¡æ€»æ˜¯è¢«ä¸€ä¸ªä¸?å?‘é€?å¤´éƒ¨ä¿¡æ?¯çš„æ¨¡æ‹Ÿå¯¹è±¡æ‰€å?–ä»£ã€‚åœ¨ä½¿ç”¨äº† 
``generate()`` æˆ– ``testAction()`` æ–¹æ³•ä¹‹å?Žï¼Œå?¯ä»¥ç”¨ ``$this->controller`` æ?¥è®¿é—®
æŽ§åˆ¶å™¨å¯¹è±¡ã€‚

æ›´å¤?æ?‚çš„ä¾‹å­?
------------

ä½œä¸ºæœ€ç®€å?•çš„å½¢å¼?ï¼Œ``testAction()`` æ–¹æ³•ä¼šåœ¨æµ‹è¯•æŽ§åˆ¶å™¨(æˆ–è€…è‡ªåŠ¨ç”Ÿæˆ?çš„æŽ§åˆ¶å™¨)åŒ…æ‹¬
æ‰€æœ‰æ¨¡æ‹Ÿçš„æ¨¡åž‹å’Œç»„ä»¶ä¹‹ä¸Šè¿?è¡Œ ``PostsController::index()``ã€‚æµ‹è¯•çš„ç»“æžœä¿?å­˜åœ¨ 
``vars`` ã€? ``contents`` ã€? ``view`` å’Œ ``return`` å±žæ€§ä¸­ã€‚è¿˜æœ‰ headers å±žæ€§ä¾›ä½ 
è®¿é—®å·²ç»?å?‘é€?çš„ ``headers``ï¼Œè®©ä½ å?¯ä»¥æŸ¥çœ‹é‡?å®šå?‘::

    public function testAdd() {
        $Posts = $this->generate('Posts', array(
            'components' => array(
                'Session',
                'Email' => array('send')
            )
        ));
        $Posts->Session
            ->expects($this->once())
            ->method('setFlash');
        $Posts->Email
            ->expects($this->once())
            ->method('send')
            ->will($this->returnValue(true));

        $this->testAction('/posts/add', array(
            'data' => array(
                'Post' => array('title' => 'New Post')
            )
        ));
        $this->assertContains('/posts', $this->headers['Location']);
    }

    public function testAddGet() {
        $this->testAction('/posts/add', array(
            'method' => 'GET',
            'return' => 'contents'
        ));
        $this->assertRegExp('/<html/', $this->contents);
        $this->assertRegExp('/<form/', $this->view);
    }


è¿™ä¸ªä¾‹å­?å±•ç¤º ``testAction()`` å’Œ ``generate()`` æ–¹æ³•ç¨?å¾®å¤?æ?‚ä¸€ç‚¹å„¿çš„ç”¨æ³•ã€‚é¦–å…ˆï¼Œ
ç”Ÿæˆ?æµ‹è¯•æŽ§åˆ¶å™¨ï¼Œæ¨¡æ‹Ÿ :php:class:`SessionComponent` ç»„ä»¶ã€‚çŽ°åœ¨æ¨¡æ‹Ÿäº† 
SessionComponent ç»„ä»¶ï¼Œæˆ‘ä»¬å°±èƒ½å¤Ÿåœ¨å®ƒä¸Šé?¢è¿?è¡Œæµ‹è¯•æ–¹æ³•ã€‚å?‡è®¾ 
``PostsController::add()`` æ–¹æ³•é‡?å®šå?‘ç”¨æˆ·åˆ° indexï¼Œå?‘é€?ä¸€å°?é‚®ä»¶ï¼Œè®¾ç½®é—ªåŠ¨æ??ç¤º
æ¶ˆæ?¯ï¼Œæµ‹è¯•å°±ä¼šé€šè¿‡ã€‚æ·»åŠ äº†ç¬¬äºŒä¸ªæµ‹è¯•å¯¹èŽ·å?– add è¡¨å?•æ—¶è¿›è¡ŒåŸºæœ¬çš„å?¥å…¨æµ‹è¯•ã€‚æˆ‘ä»¬
æ£€æŸ¥æ•´ä¸ªæ¸²æŸ“çš„å†…å®¹ï¼Œçœ‹å¸ƒå±€(*layout*)æ˜¯å?¦åŠ è½½ï¼Œå¹¶æ£€æŸ¥è§†å›¾(*view*)æ˜¯å?¦æœ‰ form 
æ ‡ç­¾ã€‚å¦‚ä½ æ‰€è§?ï¼Œè¿™äº›æ”¹åŠ¨æž?å¤§åœ°å¢žåŠ äº†ä½ çš„è‡ªç”±ï¼Œæ?¥æµ‹è¯•æŽ§åˆ¶å™¨å’Œå®¹æ˜“åœ°æ¨¡æ‹ŸæŽ§åˆ¶å™¨ç±»ã€‚

åœ¨ç”¨ä½¿ç”¨é?™æ€?æ–¹æ³•çš„æ¨¡æ‹Ÿå¯¹è±¡æ?¥æµ‹è¯•æŽ§åˆ¶å™¨æ—¶ï¼Œä½ ä¸?å¾—ä¸?ç”¨å?¦å¤–ä¸€ç§?æ–¹æ³•æ?¥è¡¨æ˜Žå¯¹æ¨¡æ‹Ÿå¯¹è±¡
çš„æœŸæœ›ã€‚ä¾‹å¦‚ï¼Œå¦‚æžœæƒ³è¦?æ¨¡æ‹Ÿ :php:meth:`AuthComponent::user()`ï¼Œå°±å¿…é¡»è¿™æ ·å?š::

    public function testAdd() {
        $Posts = $this->generate('Posts', array(
            'components' => array(
                'Session',
                'Auth' => array('user')
            )
        ));
        $Posts->Auth->staticExpects($this->any())
            ->method('user')
            ->with('id')
            ->will($this->returnValue(2));
    }

ä½¿ç”¨ ``staticExpects`` æ–¹æ³•ï¼Œå°±å?¯ä»¥æ¨¡æ‹Ÿå’Œæ“?æŽ§ç»„ä»¶å’Œæ¨¡åž‹çš„é?™æ€?æ–¹æ³•ã€‚

æµ‹è¯•è¿”å›ž JSON å“?åº”çš„æŽ§åˆ¶å™¨
--------------------------

åœ¨æž„å»ºç½‘ç»œæœ?åŠ¡(*web service*)æ—¶ï¼ŒJSON æ˜¯é?žå¸¸å?‹å¥½å’Œå¸¸ç”¨çš„æ ¼å¼?ã€‚ç”¨ CakePHP æµ‹è¯•
ç½‘ç»œæœ?åŠ¡çš„ç«¯ç‚¹å¾ˆç®€å?•ã€‚æˆ‘ä»¬å…ˆçœ‹ä¸€ä¸ªç®€å?•çš„è¿”å›ž JSON çš„æŽ§åˆ¶å™¨ä¾‹å­?::

    class MarkersController extends AppController {
        public $autoRender = false;
        public function index() {
            $data = $this->Marker->find('first');
            $this->response->body(json_encode($data));
        }
    }

çŽ°åœ¨æˆ‘ä»¬åˆ›å»ºæ–‡ä»¶ ``app/Test/Case/Controller/MarkersControllerTest.php``ï¼Œç¡®ä¿?
ç½‘ç»œæœ?åŠ¡è¿”å›žæ­£ç¡®çš„å“?åº”::

    class MarkersControllerTest extends ControllerTestCase {
        public function testIndex() {
            $result = $this->testAction('/markers/index.json');
            $result = json_decode($result, true);
            $expected = array(
                'Marker' => array('id' => 1, 'lng' => 66, 'lat' => 45),
            );
            $this->assertEquals($expected, $result);
        }
    }

æµ‹è¯•è§†å›¾
========

é€šå¸¸å¤§éƒ¨åˆ†åº”ç”¨ç¨‹åº?ä¸?ä¼šç›´æŽ¥æµ‹è¯•å®ƒä»¬çš„ HTML ä»£ç ?ã€‚è¿™ä¹ˆå?šç»?å¸¸ä¼šå¯¼è‡´è„†å¼±ã€?éš¾ä»¥ç»´æŠ¤çš„
æµ‹è¯•å¥—ä»¶ï¼Œå®¹æ˜“é?­åˆ°ç ´å??ã€‚åœ¨ä½¿ç”¨ :php:class:`ControllerTestCase` ç¼–å†™åŠŸèƒ½æ€§æµ‹è¯•æ—¶ï¼Œ
å?¯ä»¥è®¾ç½® ``return`` é€‰é¡¹ä¸º 'view' æ?¥æ£€è§†æ¸²æŸ“çš„è§†å›¾å†…å®¹ã€‚è™½ç„¶æœ‰å?¯èƒ½ä½¿ç”¨ 
ControllerTestCase æµ‹è¯•è§†å›¾å†…å®¹ï¼Œæ›´å?¥å£®ã€?æ˜“äºŽç»´æŠ¤çš„é›†æˆ?/è§†å›¾æµ‹è¯•å?¯ä»¥ä½¿ç”¨è±¡ 
`Selenium webdriver <http://seleniumhq.org>`_ è¿™æ ·çš„å·¥å…·æ?¥å®žçŽ°ã€‚


æµ‹è¯•ç»„ä»¶
========

å?‡è®¾åœ¨åº”ç”¨ç¨‹åº?ä¸­æœ‰ä¸€ä¸ªå??ä¸º PagematronComponent çš„ç»„ä»¶ã€‚è¯¥ç»„ä»¶å¸®æˆ‘ä»¬è®¾ç½®ä½¿ç”¨å®ƒçš„
æŽ§åˆ¶å™¨çš„åˆ†é¡µé™?åˆ¶ã€‚ä¸‹é?¢æ˜¯ä½?äºŽ 
``app/Controller/Component/PagematronComponent.php`` çš„ç»„ä»¶ä¾‹å­?::

    class PagematronComponent extends Component {
        public $Controller = null;

        public function startup(Controller $controller) {
            parent::startup($controller);
            $this->Controller = $controller;
            // ç¡®ä¿?æŽ§åˆ¶å™¨ä½¿ç”¨åˆ†é¡µ
            if (!isset($this->Controller->paginate)) {
                $this->Controller->paginate = array();
            }
        }

        public function adjust($length = 'short') {
            switch ($length) {
                case 'long':
                    $this->Controller->paginate['limit'] = 100;
                break;
                case 'medium':
                    $this->Controller->paginate['limit'] = 50;
                break;
                default:
                    $this->Controller->paginate['limit'] = 20;
                break;
            }
        }
    }

çŽ°åœ¨æˆ‘ä»¬å?¯ä»¥ç¼–å†™æµ‹è¯•æ?¥ç¡®ä¿?åˆ†é¡µ ``limit`` å?‚æ•°è¢«ç»„ä»¶çš„ ``adjust`` æ–¹æ³•æ­£ç¡®è®¾ç½®ã€‚
æˆ‘ä»¬åˆ›å»ºæ–‡ä»¶ ``app/Test/Case/Controller/Component/PagematronComponentTest.php``::

    App::uses('Controller', 'Controller');
    App::uses('CakeRequest', 'Network');
    App::uses('CakeResponse', 'Network');
    App::uses('ComponentCollection', 'Controller');
    App::uses('PagematronComponent', 'Controller/Component');

    // ç”¨äºŽæµ‹è¯•çš„å?‡çš„æŽ§åˆ¶å™¨
    class PagematronControllerTest extends Controller {
        public $paginate = null;
    }

    class PagematronComponentTest extends CakeTestCase {
        public $PagematronComponent = null;
        public $Controller = null;

        public function setUp() {
            parent::setUp();
            // è®¾ç½®ç»„ä»¶å’Œå?‡çš„æµ‹è¯•æŽ§åˆ¶å™¨
            $Collection = new ComponentCollection();
            $this->PagematronComponent = new PagematronComponent($Collection);
            $CakeRequest = new CakeRequest();
            $CakeResponse = new CakeResponse();
            $this->Controller = new PagematronControllerTest($CakeRequest, $CakeResponse);
            $this->PagematronComponent->startup($this->Controller);
        }

        public function testAdjust() {
            // ç”¨ä¸?å?Œçš„æµ‹è¯•æµ‹è¯• adjust æ–¹æ³•
            $this->PagematronComponent->adjust();
            $this->assertEquals(20, $this->Controller->paginate['limit']);

            $this->PagematronComponent->adjust('medium');
            $this->assertEquals(50, $this->Controller->paginate['limit']);

            $this->PagematronComponent->adjust('long');
            $this->assertEquals(100, $this->Controller->paginate['limit']);
        }

        public function tearDown() {
            parent::tearDown();
            // å®Œæˆ?å?Žæ¸…ç?†å¹²å‡€
            unset($this->PagematronComponent);
            unset($this->Controller);
        }
    }

æµ‹è¯•åŠ©ä»¶
========

æ—¢ç„¶ç›¸å½“ä¸€éƒ¨åˆ†é€»è¾‘å­˜åœ¨äºŽåŠ©ä»¶ç±»ä¸­ï¼Œç¡®ä¿?è¿™äº›ç±»è¢«æµ‹è¯•è¦†ç›–å°±å¾ˆé‡?è¦?ã€‚

æˆ‘ä»¬å…ˆåˆ›å»ºä¸€ä¸ªåŠ©ä»¶æ ·ä¾‹ç”¨äºŽæµ‹è¯•ã€‚``CurrencyRendererHelper`` å?¯ä»¥åœ¨è§†å›¾ä¸­å¸®åŠ©æ˜¾ç¤º
é‡‘é¢?ï¼Œä¸ºäº†ç®€å?•ï¼Œå?ªæœ‰ä¸€ä¸ªæ–¹æ³• ``usd()``ã€‚

::

    // app/View/Helper/CurrencyRendererHelper.php
    class CurrencyRendererHelper extends AppHelper {
        public function usd($amount) {
            return 'USD ' . number_format($amount, 2, '.', ',');
        }
    }

æˆ‘ä»¬è®¾ç½®å°?æ•°ç‚¹ä¸º 2 ä½?ï¼Œå°?æ•°ç‚¹åˆ†éš”ç¬¦ä¸ºç‚¹ï¼Œå?ƒä½?åˆ†éš”ç¬¦ä¸ºé€—å?·ï¼Œåœ¨æ ¼å¼?åŒ–çš„æ•°å­—å‰?ç¼€ä»¥ 
'USD' å­—ç¬¦ä¸²ã€‚

çŽ°åœ¨æ?¥åˆ›å»ºæµ‹è¯•::

    // app/Test/Case/View/Helper/CurrencyRendererHelperTest.php

    App::uses('Controller', 'Controller');
    App::uses('View', 'View');
    App::uses('CurrencyRendererHelper', 'View/Helper');

    class CurrencyRendererHelperTest extends CakeTestCase {
        public $CurrencyRenderer = null;

        // æˆ‘ä»¬åœ¨è¿™é‡Œå®žä¾‹åŒ–åŠ©ä»¶
        public function setUp() {
            parent::setUp();
            $Controller = new Controller();
            $View = new View($Controller);
            $this->CurrencyRenderer = new CurrencyRendererHelper($View);
        }

        // æµ‹è¯• usd() å‡½æ•°
        public function testUsd() {
            $this->assertEquals('USD 5.30', $this->CurrencyRenderer->usd(5.30));

            // åº”å½“æ€»æ˜¯æœ‰ 2 ä½?å°?æ•°
            $this->assertEquals('USD 1.00', $this->CurrencyRenderer->usd(1));
            $this->assertEquals('USD 2.05', $this->CurrencyRenderer->usd(2.05));

            // æµ‹è¯•å?ƒä½?åˆ†éš”ç¬¦
            $this->assertEquals(
              'USD 12,000.70',
              $this->CurrencyRenderer->usd(12000.70)
            );
        }
    }

è¿™é‡Œï¼Œæˆ‘ä»¬ç”¨ä¸?å?Œçš„å?‚æ•°è°ƒç”¨ ``usd()`` æ–¹æ³•ï¼Œè®©æµ‹è¯•å¥—ä»¶æ£€æŸ¥è¿”å›žå€¼æ˜¯å?¦ç­‰äºŽæ‰€æœŸæœ›çš„ã€‚

ä¿?å­˜å¹¶æ‰§è¡Œæµ‹è¯•ã€‚ä½ åº”å½“çœ‹è§?ä¸€ä¸ªç»¿è‰²è¿›åº¦æ?¡å’Œæ¶ˆæ?¯ï¼Œè¡¨ç¤º 1 ä¸ªé€šè¿‡çš„æµ‹è¯•å’Œ 4 å?¥æ–­è¨€
(*assertion*)ã€‚

åˆ›å»ºæµ‹è¯•å¥—ä»¶
============

å¦‚æžœä½ æƒ³è¦?å‡ ä¸ªæµ‹è¯•ä¸€èµ·è¿?è¡Œï¼Œå?¯ä»¥åˆ›å»ºæµ‹è¯•å¥—ä»¶ã€‚ä¸€ä¸ªæµ‹è¯•å¥—ä»¶ç”±å¤šä¸ªæµ‹è¯•ç”¨ä¾‹ç»„æˆ?ã€‚
``CakeTestSuite`` æ??ä¾›äº†ä¸€äº›æ–¹æ³•ï¼Œæ?¥åŸºäºŽæ–‡ä»¶ç³»ç»Ÿè½»æ?¾åœ°åˆ›å»ºæµ‹è¯•å¥—ä»¶ã€‚å¦‚æžœæˆ‘ä»¬è¦?ä¸º
æ‰€æœ‰çš„æ¨¡åž‹æµ‹è¯•åˆ›å»ºæµ‹è¯•å¥—ä»¶ï¼Œå?¯ä»¥åˆ›å»º ``app/Test/Case/AllModelTest.php``ã€‚æ”¾å…¥
å¦‚ä¸‹ä»£ç ?::

    class AllModelTest extends CakeTestSuite {
        public static function suite() {
            $suite = new CakeTestSuite('All model tests');
            $suite->addTestDirectory(TESTS . 'Case/Model');
            return $suite;
        }
    }

ä»¥ä¸Šä»£ç ?ä¼šæŠŠç›®å½• ``/app/Test/Case/Model/`` ä¸­æ‰€æœ‰çš„æµ‹è¯•ç”¨ä¾‹ç»„ç»‡åœ¨ä¸€èµ·ã€‚è¦?æ·»åŠ 
å?•ä¸ªæ–‡ä»¶ï¼Œä½¿ç”¨ ``$suite->addTestFile($filename);`` æ–¹æ³•ã€‚å?¯ä»¥ç”¨ä¸‹é?¢çš„åŠžæ³•é€’å½’
æ·»åŠ ä¸€ä¸ªç›®å½•ä¸­çš„æ‰€æœ‰æµ‹è¯•::

    $suite->addTestDirectoryRecursive(TESTS . 'Case/Model');

è¿™å°±ä¼šé€’å½’æ·»åŠ  ``app/Test/Case/Model`` ç›®å½•ä¸­çš„æ‰€æœ‰æµ‹è¯•ç”¨ä¾‹ã€‚ä½ å?¯ä»¥ç”¨å¤šä¸ªæµ‹è¯•
å¥—ä»¶æž„æˆ?ä¸€ä¸ªå¥—ä»¶ï¼Œæ?¥è¿?è¡Œåº”ç”¨ç¨‹åº?çš„æ‰€æœ‰æµ‹è¯•::

    class AllTestsTest extends CakeTestSuite {
        public static function suite() {
            $suite = new CakeTestSuite('All tests');
            $suite->addTestDirectoryRecursive(TESTS . 'Case');
            return $suite;
        }
    }

ç„¶å?Žå°±å?¯ä»¥ç”¨ä¸‹é?¢çš„å‘½ä»¤ä»Žå‘½ä»¤è¡Œè¿?è¡Œè¿™ä¸ªæµ‹è¯•::

    $ Console/cake test app AllTests

åˆ›å»ºæ?’ä»¶çš„æµ‹è¯•
==============

æ?’ä»¶çš„æµ‹è¯•åœ¨æ?’ä»¶ç›®å½•ä¸­è‡ªå·±çš„ç›®å½•ä¸­åˆ›å»ºã€‚ ::

    /app
        /Plugin
            /Blog
                /Test
                    /Case
                    /Fixture

æ?’ä»¶çš„æµ‹è¯•è±¡æ™®é€šçš„æµ‹è¯•ä¸€æ ·ï¼Œä½†è¦?è®°å¾—åœ¨å¯¼å…¥ç±»æ—¶è¦?ä½¿ç”¨æ?’ä»¶çš„å‘½å??çº¦å®šã€‚è¿™æ˜¯æœ¬æ‰‹å†Œ
æ?’ä»¶ä¸€ç« ä¸­ ``BlogPost`` æ¨¡åž‹çš„æµ‹è¯•ç”¨ä¾‹çš„ä¾‹å­?ã€‚ä¸Žå…¶å®ƒæµ‹è¯•çš„åŒºåˆ«åœ¨ç¬¬ä¸€è¡Œï¼Œå¯¼å…¥äº† 
'Blog.BlogPost' æ¨¡åž‹ã€‚ä¹Ÿéœ€è¦?å¯¹æ?’ä»¶å¤¹å…·(*fixture*)ä½¿ç”¨å‰?ç¼€ 
``plugin.blog.blog_post``::

    App::uses('BlogPost', 'Blog.Model');

    class BlogPostTest extends CakeTestCase {

        // æ?’ä»¶å¤¹å…·ä½?äºŽ /app/Plugin/Blog/Test/Fixture/
        public $fixtures = array('plugin.blog.blog_post');
        public $BlogPost;

        public function testSomething() {
            // ClassRegistry è®©æ¨¡åž‹ä½¿ç”¨æµ‹è¯•æ•°æ?®åº“è¿žæŽ¥
            $this->BlogPost = ClassRegistry::init('Blog.BlogPost');

            // è¿™é‡Œè¿›è¡Œä¸€äº›æœ‰ç”¨çš„æµ‹è¯•
            $this->assertTrue(is_object($this->BlogPost));
        }
    }

å¦‚æžœæƒ³è¦?åœ¨ app çš„æµ‹è¯•ä¸­ä½¿ç”¨æ?’ä»¶å¤¹å…·ï¼Œå?¯ä»¥åœ¨ ``$fixtures`` æ•°ç»„ä¸­ä½¿ç”¨ 
``plugin.pluginName.fixtureName`` è¯­æ³•æ?¥å¼•ç”¨å®ƒä»¬ã€‚

ä¸Ž Jenkins é›†æˆ?
===============

`Jenkins <http://jenkins-ci.org>`_ æ˜¯æŒ?ç»­é›†æˆ?æœ?åŠ¡å™¨ï¼Œå?¯ä»¥å¸®ä½ è‡ªåŠ¨åŒ–è¿?è¡Œæµ‹è¯•ç”¨ä¾‹ã€‚
è¿™æœ‰åŠ©äºŽç¡®ä¿?æ‰€æœ‰æµ‹è¯•ä¿?æŒ?é€šè¿‡ï¼Œåº”ç”¨ç¨‹åº?æ€»æ˜¯å‡†å¤‡å°±ç»ªçš„ã€‚

CakePHP åº”ç”¨ç¨‹åº?ä¸Ž Jenkins çš„é›†æˆ?æ˜¯ç›¸å½“ç›´æˆªäº†å½“çš„ã€‚ä¸‹é?¢å?‡è®¾ä½ å·²ç»?åœ¨ \*nix ç³»ç»Ÿä¸Š
å®‰è£…å¥½äº† Jenkinsï¼Œå¹¶ä¸”å?¯ä»¥ç®¡ç?†å®ƒã€‚ä½ ä¹ŸçŸ¥é?“å¦‚ä½•åˆ›å»ºä½œä¸š(*job*)ï¼Œè¿?è¡Œæž„å»ºã€‚å¦‚æžœä½ 
å¯¹è¿™äº›æœ‰ä»»ä½•ä¸?ç¡®å®šï¼Œè¯·å?‚è€ƒ `Jenkins æ–‡æ¡£ <http://jenkins-ci.org/>`_ 

åˆ›å»ºä½œä¸š
--------

å¼€å§‹å…ˆä¸ºåº”ç”¨ç¨‹åº?åˆ›å»ºä½œä¸šï¼Œè¿žæŽ¥åˆ°ä½ çš„ä»£ç ?ä»“åº“(*repository*)ï¼Œè¿™æ · jenkins æ‰?èƒ½
èŽ·å¾—ä½ çš„ä»£ç ?ã€‚

æ·»åŠ æµ‹è¯•æ•°æ?®åº“é…?ç½®
------------------

é€šå¸¸è®© Jenkins ä½¿ç”¨åˆ†å¼€çš„æ•°æ?®åº“æ¯”è¾ƒå¥½ï¼Œè¿™æ ·å°±å?¯ä»¥é˜²æ­¢è¿žå¸¦çš„å?±å®³ï¼Œé?¿å…?ä¸€äº›åŸºæœ¬çš„
é—®é¢˜ã€‚ä¸€æ—¦åœ¨ jenkins èƒ½å¤Ÿè®¿é—®çš„æ•°æ?®åº“æœ?åŠ¡å™¨(é€šå¸¸ä¸º localhost)ä¸Šåˆ›å»ºäº†æ–°çš„æ•°æ?®åº“ï¼Œ
åœ¨æž„å»º(*build*)ä¸­æ·»åŠ åŒ…å?«å¦‚ä¸‹ä»£ç ?çš„ *å¤–å£³è„šæœ¬æ­¥éª¤(shell script step)*::

    cat > app/Config/database.php <<'DATABASE_PHP'
    <?php
    class DATABASE_CONFIG {
        public $test = array(
            'datasource' => 'Database/Mysql',
            'host'       => 'localhost',
            'database'   => 'jenkins_test',
            'login'      => 'jenkins',
            'password'   => 'cakephp_jenkins',
            'encoding'   => 'utf8'
        );
    }
    DATABASE_PHP

è¿™ç¡®ä¿?ä½ æ€»æœ‰ Jenkins è¦?æ±‚çš„æ­£ç¡®æ•°æ?®åº“é…?ç½®ã€‚å¯¹ä»»ä½•å…¶å®ƒéœ€è¦?çš„é…?ç½®æ–‡ä»¶å?šå?Œæ ·å¤„ç?†ã€‚
ç»?å¸¸ï¼Œæ›´å¥½çš„å?šæ³•æ˜¯ï¼Œåœ¨æ¯?æ¬¡æž„å»ºä¹‹å‰?ä¹Ÿè¦?åˆ é™¤å†?é‡?æ–°åˆ›å»ºæ•°æ?®åº“ã€‚è¿™æ ·éš”ç»?äº†ä¸²è?”çš„å¤±è´¥ï¼Œ
å?³ä¸€ä¸ªå¤±è´¥çš„æž„å»ºå¼•èµ·å…¶å®ƒæž„å»ºå¤±è´¥ã€‚åœ¨æž„å»ºä¸­åŠ å…¥å?¦ä¸€ä¸ª *å¤–å£³è„šæœ¬æ­¥éª¤(shell script 
step)*ï¼ŒåŒ…å?«å¦‚ä¸‹ä»£ç ?::

    mysql -u jenkins -pcakephp_jenkins -e 'DROP DATABASE IF EXISTS jenkins_test; CREATE DATABASE jenkins_test';

æ·»åŠ æµ‹è¯•
--------

åœ¨æž„å»ºä¸­åŠ å…¥å?¦ä¸€ä¸ª *å¤–å£³è„šæœ¬æ­¥éª¤(shell script step)*ã€‚åœ¨è¿™ä¸ªæ­¥éª¤ä¸­è¿?è¡Œåº”ç”¨ç¨‹åº?çš„
æµ‹è¯•ã€‚åˆ›å»º JUnit æ—¥å¿—æ–‡ä»¶æˆ–è€… clover æµ‹è¯•è¦†ç›–(*coverage*)ï¼Œé€šå¸¸æ›´å¥½ï¼Œå› ä¸ºè¿™ä¸º
æµ‹è¯•ç»“æžœæ??ä¾›äº†ä¸€ä¸ªä¸?é”™çš„å›¾å½¢æ˜¾ç¤º::

    app/Console/cake test app AllTests \
    --stderr \
    --log-junit junit.xml \
    --coverage-clover clover.xml

å¦‚æžœä½ ä½¿ç”¨ clover æµ‹è¯•è¦†ç›–(*coverage*) æˆ–è€… JUnit ç»“æžœï¼Œç¡®ä¿?è¿™äº›ä¹Ÿåœ¨ Jenkins ä¸­
é…?ç½®å¥½äº†ã€‚å¦‚æžœæ²¡æœ‰é…?ç½®è¿™äº›æ­¥éª¤ï¼Œå°±ä¸?èƒ½çœ‹åˆ°ç»“æžœã€‚

è¿?è¡Œæž„å»º
--------

çŽ°åœ¨ä½ åº”å½“èƒ½å¤Ÿè¿?è¡Œæž„å»ºäº†ã€‚æ£€æŸ¥æŽ§åˆ¶å?°è¾“å‡ºï¼Œå¹¶ä½œå‡ºå¿…è¦?çš„ä¿®æ”¹è®©æž„å»ºé€šè¿‡ã€‚


.. meta::
    :title lang=zh_CN: Testing
    :keywords lang=zh_CN: web runner,phpunit,test database,database configuration,database setup,database test,public test,test framework,running one,test setup,de facto standard,pear,runners,array,databases,cakephp,php,integration
