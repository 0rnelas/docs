Первое знакомство с CakePHP
###########################

CakePHP создан, чтобы сделать наиболее частые задачи веб-разработки простыми и
не требующими особых усилий на их реализацию. Предоставляя инструментарий
все-в-одном для начала работы различные части CakePHP работают хорошо все
вместе либо по отдельности.

Цель данного обзора ознакомить Вас с основными концепциями CakePHP, и
дать Вам быстрый обзор того, как эти концепции реализованы в CakePHP. Если
Вы горите желанием начать свой проект, Вы можете :doc:`начать с руководства
</tutorials-and-examples/bookmarks/intro>`, или :doc:`погрузиться в документацию
</topics>`.

Соглашения превыше конфигурации
===============================

CakePHP предоставляет базовую организационную структуру охватывающую имена
классов, файлов, таблиц базы данных, и прочие соглашения. В то время, как 
изучение соглашений занимает определенное время, следование им позволяет
Вам создать базовую структуру приложения без написания дополнительных 
настроек, что значительно упрощает работу с различными проектами.
:doc:`Раздел Соглашения </intro/conventions>` описывает все соглашения,
используемые в CakePHP.

Модель
======

Модель представляет ту часть Вашего приложения, которая реализует бизнес-логику.
Она отвечает за получение данных и их преобразование в соответствии с
концепцией Вашего приложения. Это включает обработку, валидацию, ассоциации
и прочие задачи по манипулированию данными.

В случае с соц. сетями, Модель заботится о таких задачах, как сохранение
пользовательских данных, ассоциации пользователя с его друзьями, хранение и
получение пользовательских фото, нахождение возможных друзей, и т.д.
Объектами модели в данном случае могут быть "Друг", "Пользователь",
"Комментарий", или "Фото". Если нам нужно загрузить некоторые данные
из нашей таблицы ``users`` мы должны сделать следующее::

    use Cake\ORM\TableRegistry;

    $users = TableRegistry::get('Users');
    $query = $users->find();
    foreach ($query as $row) {
        echo $row->username;
    }
    
Вы можете заметить, что мы не должны писать никакого кода перед началом
работы с нашими данными. Благодаря соглашениям CakePHP будет использовать
стандартные классы для таблиц и записей без необходимости явно объявлять их.

Если бы мы хотели создать нового пользователя (с использованием валидации)
мы могли бы это сделать например так::

    use Cake\ORM\TableRegistry;

    $users = TableRegistry::get('Users');
    $user = $users->newEntity(['email' => 'mark@example.com']);
    $users->save($user);


.. note::
    The documentation is not currently supported in Russian language for this
    page.

    Please feel free to send us a pull request on
    `Github <https://github.com/cakephp/docs>`_ or use the **Improve This Doc**
    button to directly propose your changes.

    You can refer to the english version in the select top menu to have
    information about this page's topic.

Рекомендуется к прочтению
=========================

.. toctree::
    :maxdepth: 1

    /intro/where-to-get-help
    /intro/conventions
    /intro/cakephp-folder-structure

.. meta::
    :title lang=ru: Getting Started
    :keywords lang=ru: folder structure,table names,initial request,database table,organizational structure,rst,filenames,conventions,mvc,web page,sit
