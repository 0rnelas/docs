Руководство по миграции на новую ORM
####################################

Одним из ововведений CakePHP 3.0 была полностью переписанное объектно-реляционное
отображение (ORM). ORM используемое в версиях 1.x и 2.x служившая нам длительное
время имела некоторые проблемы, которые мы хотели исправить.

* Frankenstein - Это запись или таблица? И то и другое.
* Например несовместимый API - Model::read().
* Не было объекта запроса - Запросы всегда определялись как массивы, это имело
  некоторые ограничения и недостатки. Например это делало объединения и подзапросы
  намного сложнее.
* Возвращаемые массивы - Это было общим недовольством, касающимся CakePHP, и
  вероятно повлияло принятие фреймворка на некотором уровне.
* Не было объекта записи - Это сделало добавление методов форматирования
  сложным/невозможным.
* Содержимость - Должна быть частью ORM, а не безумным классом поведения.
* Рекурсивность - Должна лучше контроллироваться, определением ассоциаций, которые
  должны быть включены, а не уровнем вложенности рекурсии.
* DboSource - Это ужас, и Модель полагается на нее больше чем на источник данных.
  Это разделение должно быть проще и яснее.
* Валидация - Должна быть самостоятельной, сейчас это гигантская функция. Сделав
  ее переиспользуемой фреймворк станет более расширяемый.

В CakePHP 3.0 новая ORM решает эти и другие проблемы. Новая ORM фокусируется на
на реляционных данных. В будущем с помощью плагинов мы добавим в нее нереляционные
хранилища, такие как ElasticSearch и т.д.

Устройство новой ORM
====================

Новая ORM решает некоторые проблемы наличием более специализированных и
сфокусированных классов. В прошлом вы использовали ``Model`` и Datasource для
проведения всех операций. Теперь ORM разделяется на несколько слоев:

* ``Cake\Database\Connection`` - Предоставляет независимую платформу для создания
  и использования соединений. Этот класс обеспечивает использование транзакций,
  выполнение запросов и предоставляет доступ к данным схемы.
* ``Cake\Database\Dialect`` - Классы этого пространства имен преобразуют запросы
  для работы с конкретной SQL платформой, учитывая их специфичиские ограничения.
* ``Cake\Database\Type`` - Это класс шлюза CakePHP системы преобразования типов
  данных в Базе Данных. Это подключаемый каркас, добавляющий абстрактные типы
  столбцов и обеспечивает соответствие между базой данных, PHP представлением и
  PDO bindings для каждого типа данных. Например столбцы типа datetime в вашем
  коде будут представлены в виде объектов ``DateTime``.
* ``Cake\ORM\Table`` - Основная точка вхождения в новую ORM. Обеспечивает доступ
  к конкретной таблице. Управляет настройками отношений с другими таблицами,
  использует классы поведения, создает сущности и объекты запроса.
* ``Cake\ORM\Behavior`` - Базовый класс поведения, который работает похожим
  образом, как в предыдущих версиях CakePHP.
* ``Cake\ORM\Query`` - Изменчивый объект основанный на построителе запросов,
  заменяющий глубоко вложенные массивы, которые использовались в предыдущих
  версиях CakePHP.
* ``Cake\ORM\ResultSet`` - Коллекция результатов, которая предоставляет мощные
  инструменты для манипуляции совокупностью данных.
* ``Cake\ORM\Entity`` - Представляет собой одну запись в таблице. Предоставляет
  доступ к данным и сериализацию в различных форматах.
